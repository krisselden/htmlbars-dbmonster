define('htmlbars-syntax-tests/htmlbars-syntax.jshint', ['exports'], function (exports) {
  module('JSHint - htmlbars-syntax-tests');
  test('htmlbars-syntax-tests/htmlbars-syntax.js should pass jshint', function () {
    ok(true, 'htmlbars-syntax-tests/htmlbars-syntax.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXN5bnRheC10ZXN0cy9odG1sYmFycy1zeW50YXguanNoaW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxRQUFNLENBQUMsZ0NBQWdDLENBQUMsQ0FBQztBQUN6QyxNQUFJLENBQUMsNkRBQTZELEVBQUUsWUFBVztBQUM3RSxNQUFFLENBQUMsSUFBSSxFQUFFLDhEQUE4RCxDQUFDLENBQUM7R0FDMUUsQ0FBQyxDQUFDIiwiZmlsZSI6Imh0bWxiYXJzLXN5bnRheC10ZXN0cy9odG1sYmFycy1zeW50YXguanNoaW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlKCdKU0hpbnQgLSBodG1sYmFycy1zeW50YXgtdGVzdHMnKTtcbnRlc3QoJ2h0bWxiYXJzLXN5bnRheC10ZXN0cy9odG1sYmFycy1zeW50YXguanMgc2hvdWxkIHBhc3MganNoaW50JywgZnVuY3Rpb24oKSB7IFxuICBvayh0cnVlLCAnaHRtbGJhcnMtc3ludGF4LXRlc3RzL2h0bWxiYXJzLXN5bnRheC5qcyBzaG91bGQgcGFzcyBqc2hpbnQuJyk7IFxufSk7XG4iXX0=
define('htmlbars-syntax-tests/htmlbars-syntax/builders.jshint', ['exports'], function (exports) {
  module('JSHint - htmlbars-syntax-tests/htmlbars-syntax');
  test('htmlbars-syntax-tests/htmlbars-syntax/builders.js should pass jshint', function () {
    ok(true, 'htmlbars-syntax-tests/htmlbars-syntax/builders.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXN5bnRheC10ZXN0cy9odG1sYmFycy1zeW50YXgvYnVpbGRlcnMuanNoaW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxRQUFNLENBQUMsZ0RBQWdELENBQUMsQ0FBQztBQUN6RCxNQUFJLENBQUMsc0VBQXNFLEVBQUUsWUFBVztBQUN0RixNQUFFLENBQUMsSUFBSSxFQUFFLHVFQUF1RSxDQUFDLENBQUM7R0FDbkYsQ0FBQyxDQUFDIiwiZmlsZSI6Imh0bWxiYXJzLXN5bnRheC10ZXN0cy9odG1sYmFycy1zeW50YXgvYnVpbGRlcnMuanNoaW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlKCdKU0hpbnQgLSBodG1sYmFycy1zeW50YXgtdGVzdHMvaHRtbGJhcnMtc3ludGF4Jyk7XG50ZXN0KCdodG1sYmFycy1zeW50YXgtdGVzdHMvaHRtbGJhcnMtc3ludGF4L2J1aWxkZXJzLmpzIHNob3VsZCBwYXNzIGpzaGludCcsIGZ1bmN0aW9uKCkgeyBcbiAgb2sodHJ1ZSwgJ2h0bWxiYXJzLXN5bnRheC10ZXN0cy9odG1sYmFycy1zeW50YXgvYnVpbGRlcnMuanMgc2hvdWxkIHBhc3MganNoaW50LicpOyBcbn0pO1xuIl19
define('htmlbars-syntax-tests/htmlbars-syntax/parser.jshint', ['exports'], function (exports) {
  module('JSHint - htmlbars-syntax-tests/htmlbars-syntax');
  test('htmlbars-syntax-tests/htmlbars-syntax/parser.js should pass jshint', function () {
    ok(true, 'htmlbars-syntax-tests/htmlbars-syntax/parser.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXN5bnRheC10ZXN0cy9odG1sYmFycy1zeW50YXgvcGFyc2VyLmpzaGludC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsUUFBTSxDQUFDLGdEQUFnRCxDQUFDLENBQUM7QUFDekQsTUFBSSxDQUFDLG9FQUFvRSxFQUFFLFlBQVc7QUFDcEYsTUFBRSxDQUFDLElBQUksRUFBRSxxRUFBcUUsQ0FBQyxDQUFDO0dBQ2pGLENBQUMsQ0FBQyIsImZpbGUiOiJodG1sYmFycy1zeW50YXgtdGVzdHMvaHRtbGJhcnMtc3ludGF4L3BhcnNlci5qc2hpbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUoJ0pTSGludCAtIGh0bWxiYXJzLXN5bnRheC10ZXN0cy9odG1sYmFycy1zeW50YXgnKTtcbnRlc3QoJ2h0bWxiYXJzLXN5bnRheC10ZXN0cy9odG1sYmFycy1zeW50YXgvcGFyc2VyLmpzIHNob3VsZCBwYXNzIGpzaGludCcsIGZ1bmN0aW9uKCkgeyBcbiAgb2sodHJ1ZSwgJ2h0bWxiYXJzLXN5bnRheC10ZXN0cy9odG1sYmFycy1zeW50YXgvcGFyc2VyLmpzIHNob3VsZCBwYXNzIGpzaGludC4nKTsgXG59KTtcbiJdfQ==
define('htmlbars-syntax-tests/htmlbars-syntax/parser/handlebars-node-visitors.jshint', ['exports'], function (exports) {
  module('JSHint - htmlbars-syntax-tests/htmlbars-syntax/parser');
  test('htmlbars-syntax-tests/htmlbars-syntax/parser/handlebars-node-visitors.js should pass jshint', function () {
    ok(true, 'htmlbars-syntax-tests/htmlbars-syntax/parser/handlebars-node-visitors.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXN5bnRheC10ZXN0cy9odG1sYmFycy1zeW50YXgvcGFyc2VyL2hhbmRsZWJhcnMtbm9kZS12aXNpdG9ycy5qc2hpbnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLFFBQU0sQ0FBQyx1REFBdUQsQ0FBQyxDQUFDO0FBQ2hFLE1BQUksQ0FBQyw2RkFBNkYsRUFBRSxZQUFXO0FBQzdHLE1BQUUsQ0FBQyxJQUFJLEVBQUUsOEZBQThGLENBQUMsQ0FBQztHQUMxRyxDQUFDLENBQUMiLCJmaWxlIjoiaHRtbGJhcnMtc3ludGF4LXRlc3RzL2h0bWxiYXJzLXN5bnRheC9wYXJzZXIvaGFuZGxlYmFycy1ub2RlLXZpc2l0b3JzLmpzaGludC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZSgnSlNIaW50IC0gaHRtbGJhcnMtc3ludGF4LXRlc3RzL2h0bWxiYXJzLXN5bnRheC9wYXJzZXInKTtcbnRlc3QoJ2h0bWxiYXJzLXN5bnRheC10ZXN0cy9odG1sYmFycy1zeW50YXgvcGFyc2VyL2hhbmRsZWJhcnMtbm9kZS12aXNpdG9ycy5qcyBzaG91bGQgcGFzcyBqc2hpbnQnLCBmdW5jdGlvbigpIHsgXG4gIG9rKHRydWUsICdodG1sYmFycy1zeW50YXgtdGVzdHMvaHRtbGJhcnMtc3ludGF4L3BhcnNlci9oYW5kbGViYXJzLW5vZGUtdmlzaXRvcnMuanMgc2hvdWxkIHBhc3MganNoaW50LicpOyBcbn0pO1xuIl19
define('htmlbars-syntax-tests/htmlbars-syntax/parser/tokenizer-event-handlers.jshint', ['exports'], function (exports) {
  module('JSHint - htmlbars-syntax-tests/htmlbars-syntax/parser');
  test('htmlbars-syntax-tests/htmlbars-syntax/parser/tokenizer-event-handlers.js should pass jshint', function () {
    ok(true, 'htmlbars-syntax-tests/htmlbars-syntax/parser/tokenizer-event-handlers.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXN5bnRheC10ZXN0cy9odG1sYmFycy1zeW50YXgvcGFyc2VyL3Rva2VuaXplci1ldmVudC1oYW5kbGVycy5qc2hpbnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLFFBQU0sQ0FBQyx1REFBdUQsQ0FBQyxDQUFDO0FBQ2hFLE1BQUksQ0FBQyw2RkFBNkYsRUFBRSxZQUFXO0FBQzdHLE1BQUUsQ0FBQyxJQUFJLEVBQUUsOEZBQThGLENBQUMsQ0FBQztHQUMxRyxDQUFDLENBQUMiLCJmaWxlIjoiaHRtbGJhcnMtc3ludGF4LXRlc3RzL2h0bWxiYXJzLXN5bnRheC9wYXJzZXIvdG9rZW5pemVyLWV2ZW50LWhhbmRsZXJzLmpzaGludC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZSgnSlNIaW50IC0gaHRtbGJhcnMtc3ludGF4LXRlc3RzL2h0bWxiYXJzLXN5bnRheC9wYXJzZXInKTtcbnRlc3QoJ2h0bWxiYXJzLXN5bnRheC10ZXN0cy9odG1sYmFycy1zeW50YXgvcGFyc2VyL3Rva2VuaXplci1ldmVudC1oYW5kbGVycy5qcyBzaG91bGQgcGFzcyBqc2hpbnQnLCBmdW5jdGlvbigpIHsgXG4gIG9rKHRydWUsICdodG1sYmFycy1zeW50YXgtdGVzdHMvaHRtbGJhcnMtc3ludGF4L3BhcnNlci90b2tlbml6ZXItZXZlbnQtaGFuZGxlcnMuanMgc2hvdWxkIHBhc3MganNoaW50LicpOyBcbn0pO1xuIl19
define('htmlbars-syntax-tests/htmlbars-syntax/traversal/errors.jshint', ['exports'], function (exports) {
  module('JSHint - htmlbars-syntax-tests/htmlbars-syntax/traversal');
  test('htmlbars-syntax-tests/htmlbars-syntax/traversal/errors.js should pass jshint', function () {
    ok(true, 'htmlbars-syntax-tests/htmlbars-syntax/traversal/errors.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXN5bnRheC10ZXN0cy9odG1sYmFycy1zeW50YXgvdHJhdmVyc2FsL2Vycm9ycy5qc2hpbnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLFFBQU0sQ0FBQywwREFBMEQsQ0FBQyxDQUFDO0FBQ25FLE1BQUksQ0FBQyw4RUFBOEUsRUFBRSxZQUFXO0FBQzlGLE1BQUUsQ0FBQyxJQUFJLEVBQUUsK0VBQStFLENBQUMsQ0FBQztHQUMzRixDQUFDLENBQUMiLCJmaWxlIjoiaHRtbGJhcnMtc3ludGF4LXRlc3RzL2h0bWxiYXJzLXN5bnRheC90cmF2ZXJzYWwvZXJyb3JzLmpzaGludC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZSgnSlNIaW50IC0gaHRtbGJhcnMtc3ludGF4LXRlc3RzL2h0bWxiYXJzLXN5bnRheC90cmF2ZXJzYWwnKTtcbnRlc3QoJ2h0bWxiYXJzLXN5bnRheC10ZXN0cy9odG1sYmFycy1zeW50YXgvdHJhdmVyc2FsL2Vycm9ycy5qcyBzaG91bGQgcGFzcyBqc2hpbnQnLCBmdW5jdGlvbigpIHsgXG4gIG9rKHRydWUsICdodG1sYmFycy1zeW50YXgtdGVzdHMvaHRtbGJhcnMtc3ludGF4L3RyYXZlcnNhbC9lcnJvcnMuanMgc2hvdWxkIHBhc3MganNoaW50LicpOyBcbn0pO1xuIl19
define('htmlbars-syntax-tests/htmlbars-syntax/traversal/traverse.jshint', ['exports'], function (exports) {
  module('JSHint - htmlbars-syntax-tests/htmlbars-syntax/traversal');
  test('htmlbars-syntax-tests/htmlbars-syntax/traversal/traverse.js should pass jshint', function () {
    ok(true, 'htmlbars-syntax-tests/htmlbars-syntax/traversal/traverse.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXN5bnRheC10ZXN0cy9odG1sYmFycy1zeW50YXgvdHJhdmVyc2FsL3RyYXZlcnNlLmpzaGludC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsUUFBTSxDQUFDLDBEQUEwRCxDQUFDLENBQUM7QUFDbkUsTUFBSSxDQUFDLGdGQUFnRixFQUFFLFlBQVc7QUFDaEcsTUFBRSxDQUFDLElBQUksRUFBRSxpRkFBaUYsQ0FBQyxDQUFDO0dBQzdGLENBQUMsQ0FBQyIsImZpbGUiOiJodG1sYmFycy1zeW50YXgtdGVzdHMvaHRtbGJhcnMtc3ludGF4L3RyYXZlcnNhbC90cmF2ZXJzZS5qc2hpbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUoJ0pTSGludCAtIGh0bWxiYXJzLXN5bnRheC10ZXN0cy9odG1sYmFycy1zeW50YXgvdHJhdmVyc2FsJyk7XG50ZXN0KCdodG1sYmFycy1zeW50YXgtdGVzdHMvaHRtbGJhcnMtc3ludGF4L3RyYXZlcnNhbC90cmF2ZXJzZS5qcyBzaG91bGQgcGFzcyBqc2hpbnQnLCBmdW5jdGlvbigpIHsgXG4gIG9rKHRydWUsICdodG1sYmFycy1zeW50YXgtdGVzdHMvaHRtbGJhcnMtc3ludGF4L3RyYXZlcnNhbC90cmF2ZXJzZS5qcyBzaG91bGQgcGFzcyBqc2hpbnQuJyk7IFxufSk7XG4iXX0=
define('htmlbars-syntax-tests/htmlbars-syntax/traversal/walker.jshint', ['exports'], function (exports) {
  module('JSHint - htmlbars-syntax-tests/htmlbars-syntax/traversal');
  test('htmlbars-syntax-tests/htmlbars-syntax/traversal/walker.js should pass jshint', function () {
    ok(true, 'htmlbars-syntax-tests/htmlbars-syntax/traversal/walker.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXN5bnRheC10ZXN0cy9odG1sYmFycy1zeW50YXgvdHJhdmVyc2FsL3dhbGtlci5qc2hpbnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLFFBQU0sQ0FBQywwREFBMEQsQ0FBQyxDQUFDO0FBQ25FLE1BQUksQ0FBQyw4RUFBOEUsRUFBRSxZQUFXO0FBQzlGLE1BQUUsQ0FBQyxJQUFJLEVBQUUsK0VBQStFLENBQUMsQ0FBQztHQUMzRixDQUFDLENBQUMiLCJmaWxlIjoiaHRtbGJhcnMtc3ludGF4LXRlc3RzL2h0bWxiYXJzLXN5bnRheC90cmF2ZXJzYWwvd2Fsa2VyLmpzaGludC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZSgnSlNIaW50IC0gaHRtbGJhcnMtc3ludGF4LXRlc3RzL2h0bWxiYXJzLXN5bnRheC90cmF2ZXJzYWwnKTtcbnRlc3QoJ2h0bWxiYXJzLXN5bnRheC10ZXN0cy9odG1sYmFycy1zeW50YXgvdHJhdmVyc2FsL3dhbGtlci5qcyBzaG91bGQgcGFzcyBqc2hpbnQnLCBmdW5jdGlvbigpIHsgXG4gIG9rKHRydWUsICdodG1sYmFycy1zeW50YXgtdGVzdHMvaHRtbGJhcnMtc3ludGF4L3RyYXZlcnNhbC93YWxrZXIuanMgc2hvdWxkIHBhc3MganNoaW50LicpOyBcbn0pO1xuIl19
define('htmlbars-syntax-tests/htmlbars-syntax/types/visitor-keys.jshint', ['exports'], function (exports) {
  module('JSHint - htmlbars-syntax-tests/htmlbars-syntax/types');
  test('htmlbars-syntax-tests/htmlbars-syntax/types/visitor-keys.js should pass jshint', function () {
    ok(true, 'htmlbars-syntax-tests/htmlbars-syntax/types/visitor-keys.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXN5bnRheC10ZXN0cy9odG1sYmFycy1zeW50YXgvdHlwZXMvdmlzaXRvci1rZXlzLmpzaGludC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsUUFBTSxDQUFDLHNEQUFzRCxDQUFDLENBQUM7QUFDL0QsTUFBSSxDQUFDLGdGQUFnRixFQUFFLFlBQVc7QUFDaEcsTUFBRSxDQUFDLElBQUksRUFBRSxpRkFBaUYsQ0FBQyxDQUFDO0dBQzdGLENBQUMsQ0FBQyIsImZpbGUiOiJodG1sYmFycy1zeW50YXgtdGVzdHMvaHRtbGJhcnMtc3ludGF4L3R5cGVzL3Zpc2l0b3Ita2V5cy5qc2hpbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUoJ0pTSGludCAtIGh0bWxiYXJzLXN5bnRheC10ZXN0cy9odG1sYmFycy1zeW50YXgvdHlwZXMnKTtcbnRlc3QoJ2h0bWxiYXJzLXN5bnRheC10ZXN0cy9odG1sYmFycy1zeW50YXgvdHlwZXMvdmlzaXRvci1rZXlzLmpzIHNob3VsZCBwYXNzIGpzaGludCcsIGZ1bmN0aW9uKCkgeyBcbiAgb2sodHJ1ZSwgJ2h0bWxiYXJzLXN5bnRheC10ZXN0cy9odG1sYmFycy1zeW50YXgvdHlwZXMvdmlzaXRvci1rZXlzLmpzIHNob3VsZCBwYXNzIGpzaGludC4nKTsgXG59KTtcbiJdfQ==
define('htmlbars-syntax-tests/htmlbars-syntax/utils.jshint', ['exports'], function (exports) {
  module('JSHint - htmlbars-syntax-tests/htmlbars-syntax');
  test('htmlbars-syntax-tests/htmlbars-syntax/utils.js should pass jshint', function () {
    ok(true, 'htmlbars-syntax-tests/htmlbars-syntax/utils.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXN5bnRheC10ZXN0cy9odG1sYmFycy1zeW50YXgvdXRpbHMuanNoaW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxRQUFNLENBQUMsZ0RBQWdELENBQUMsQ0FBQztBQUN6RCxNQUFJLENBQUMsbUVBQW1FLEVBQUUsWUFBVztBQUNuRixNQUFFLENBQUMsSUFBSSxFQUFFLG9FQUFvRSxDQUFDLENBQUM7R0FDaEYsQ0FBQyxDQUFDIiwiZmlsZSI6Imh0bWxiYXJzLXN5bnRheC10ZXN0cy9odG1sYmFycy1zeW50YXgvdXRpbHMuanNoaW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlKCdKU0hpbnQgLSBodG1sYmFycy1zeW50YXgtdGVzdHMvaHRtbGJhcnMtc3ludGF4Jyk7XG50ZXN0KCdodG1sYmFycy1zeW50YXgtdGVzdHMvaHRtbGJhcnMtc3ludGF4L3V0aWxzLmpzIHNob3VsZCBwYXNzIGpzaGludCcsIGZ1bmN0aW9uKCkgeyBcbiAgb2sodHJ1ZSwgJ2h0bWxiYXJzLXN5bnRheC10ZXN0cy9odG1sYmFycy1zeW50YXgvdXRpbHMuanMgc2hvdWxkIHBhc3MganNoaW50LicpOyBcbn0pO1xuIl19
define("htmlbars-syntax-tests/loc-node-test", ["exports", "../htmlbars-syntax"], function (exports, _htmlbarsSyntax) {

  QUnit.module("[htmlbars-syntax] Parser - Location Info");

  function locEqual(node, startLine, startColumn, endLine, endColumn, message) {

    var expected = {
      source: null,
      start: { line: startLine, column: startColumn },
      end: { line: endLine, column: endColumn }
    };

    deepEqual(node.loc, expected, message);
  }

  test("programs", function () {
    var ast = _htmlbarsSyntax.parse("\n  {{#if foo}}\n    {{bar}}\n       {{/if}}\n    ");

    locEqual(ast, 1, 0, 5, 4, 'outer program');

    // startColumn should be 13 not 2.
    // This should be fixed upstream in Handlebars.
    locEqual(ast.body[1].program, 2, 2, 4, 7, 'nested program');
  });

  test("blocks", function () {
    var ast = _htmlbarsSyntax.parse("\n  {{#if foo}}\n    {{#if bar}}\n        test\n        {{else}}\n      test\n  {{/if    }}\n       {{/if\n      }}\n    ");

    locEqual(ast.body[1], 2, 2, 9, 8, 'outer block');
    locEqual(ast.body[1].program.body[0], 3, 4, 7, 13, 'nested block');
  });

  test("mustache", function () {
    var ast = _htmlbarsSyntax.parse("\n    {{foo}}\n    {{#if foo}}\n      bar: {{bar\n        }}\n    {{/if}}\n  ");

    locEqual(ast.body[1], 2, 4, 2, 11, 'outer mustache');
    locEqual(ast.body[3].program.body[1], 4, 11, 5, 10, 'inner mustache');
  });

  test("element modifier", function () {
    var ast = _htmlbarsSyntax.parse("\n    <div {{bind-attr\n      foo\n      bar=wat}}></div>\n  ");

    locEqual(ast.body[1].modifiers[0], 2, 9, 4, 15, 'element modifier');
  });

  test("html elements", function () {
    var ast = _htmlbarsSyntax.parse("\n    <section>\n      <br>\n      <div>\n        <hr />\n      </div>\n    </section>\n  ");

    var _ast$body = ast.body;
    var section = _ast$body[1];
    var _section$children = section.children;
    var br = _section$children[1];
    var div = _section$children[3];
    var _div$children = div.children;
    var hr = _div$children[1];

    locEqual(section, 2, 4, 7, 14, 'section element');
    locEqual(br, 3, 6, 3, 10, 'br element');
    locEqual(div, 4, 6, 6, 12, 'div element');
    locEqual(hr, 5, 8, 5, 14, 'hr element');
  });

  test("components", function () {
    var ast = _htmlbarsSyntax.parse("\n    <el-page>\n      <el-header></el-header>\n      <el-input />\n      <el-footer>\n          </el-footer>\n    </el-page>\n  ");

    var _ast$body2 = ast.body;
    var page = _ast$body2[1];
    var _page$program$body = page.program.body;
    var header = _page$program$body[1];
    var input = _page$program$body[3];
    var footer = _page$program$body[5];

    locEqual(page, 2, 4, 7, 14, 'page component');
    locEqual(header, 3, 6, 3, 29, 'header component');
    locEqual(input, 4, 6, 4, 18, 'input component');
    locEqual(footer, 5, 6, 6, 22, 'footer component');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXN5bnRheC10ZXN0cy9sb2Mtbm9kZS10ZXN0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEsT0FBSyxDQUFDLE1BQU0sQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDOztBQUV6RCxXQUFTLFFBQVEsQ0FBQyxJQUFJLEVBQUUsU0FBUyxFQUFFLFdBQVcsRUFBRSxPQUFPLEVBQUUsU0FBUyxFQUFFLE9BQU8sRUFBRTs7QUFFM0UsUUFBSSxRQUFRLEdBQUc7QUFDYixZQUFNLEVBQUUsSUFBSTtBQUNaLFdBQUssRUFBRSxFQUFFLElBQUksRUFBRSxTQUFTLEVBQUUsTUFBTSxFQUFFLFdBQVcsRUFBRTtBQUMvQyxTQUFHLEVBQUUsRUFBRSxJQUFJLEVBQUUsT0FBTyxFQUFFLE1BQU0sRUFBRSxTQUFTLEVBQUU7S0FDMUMsQ0FBQzs7QUFFRixhQUFTLENBQUMsSUFBSSxDQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUUsT0FBTyxDQUFDLENBQUM7R0FDeEM7O0FBRUQsTUFBSSxDQUFDLFVBQVUsRUFBRSxZQUFXO0FBQzFCLFFBQUksR0FBRyxHQUFHLGdCQWhCSCxLQUFLLHNEQW9CUixDQUFDOztBQUVMLFlBQVEsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLGVBQWUsQ0FBQyxDQUFDOzs7O0FBSTNDLFlBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsZ0JBQWdCLENBQUMsQ0FBQztHQUM3RCxDQUFDLENBQUM7O0FBRUgsTUFBSSxDQUFDLFFBQVEsRUFBRSxZQUFXO0FBQ3hCLFFBQUksR0FBRyxHQUFHLGdCQTlCSCxLQUFLLDZIQXVDUixDQUFDOztBQUVMLFlBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxhQUFhLENBQUMsQ0FBQztBQUNqRCxZQUFRLENBQUMsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxjQUFjLENBQUMsQ0FBQztHQUNwRSxDQUFDLENBQUM7O0FBRUgsTUFBSSxDQUFDLFVBQVUsRUFBRSxZQUFXO0FBQzFCLFFBQUksR0FBRyxHQUFHLGdCQTlDSCxLQUFLLGlGQW9EVixDQUFDOztBQUVILFlBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0FBQ3JELFlBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLGdCQUFnQixDQUFDLENBQUM7R0FDdkUsQ0FBQyxDQUFDOztBQUVILE1BQUksQ0FBQyxrQkFBa0IsRUFBRSxZQUFXO0FBQ2xDLFFBQUksR0FBRyxHQUFHLGdCQTNESCxLQUFLLGlFQStEVixDQUFDOztBQUVILFlBQVEsQ0FBQyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsa0JBQWtCLENBQUMsQ0FBQztHQUNyRSxDQUFDLENBQUM7O0FBRUgsTUFBSSxDQUFDLGVBQWUsRUFBRSxZQUFXO0FBQy9CLFFBQUksR0FBRyxHQUFHLGdCQXJFSCxLQUFLLDhGQTRFVixDQUFDOztvQkFFYyxHQUFHLENBQUMsSUFBSTtRQUFuQixPQUFPOzRCQUNJLE9BQU8sQ0FBQyxRQUFRO1FBQTNCLEVBQUU7UUFBRSxHQUFHO3dCQUNELEdBQUcsQ0FBQyxRQUFRO1FBQWxCLEVBQUU7O0FBRVIsWUFBUSxDQUFDLE9BQU8sRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztBQUNsRCxZQUFRLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxZQUFZLENBQUMsQ0FBQztBQUN4QyxZQUFRLENBQUMsR0FBRyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxhQUFhLENBQUMsQ0FBQztBQUMxQyxZQUFRLENBQUMsRUFBRSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxZQUFZLENBQUMsQ0FBQztHQUN6QyxDQUFDLENBQUM7O0FBRUgsTUFBSSxDQUFDLFlBQVksRUFBRSxZQUFXO0FBQzVCLFFBQUksR0FBRyxHQUFHLGdCQXpGSCxLQUFLLHFJQWdHVixDQUFDOztxQkFFVyxHQUFHLENBQUMsSUFBSTtRQUFoQixJQUFJOzZCQUNxQixJQUFJLENBQUMsT0FBTyxDQUFDLElBQUk7UUFBMUMsTUFBTTtRQUFFLEtBQUs7UUFBRSxNQUFNOztBQUUzQixZQUFRLENBQUMsSUFBSSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxnQkFBZ0IsQ0FBQyxDQUFDO0FBQzlDLFlBQVEsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRSxFQUFFLGtCQUFrQixDQUFDLENBQUM7QUFDbEQsWUFBUSxDQUFDLEtBQUssRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLENBQUMsRUFBRSxFQUFFLEVBQUUsaUJBQWlCLENBQUMsQ0FBQztBQUNoRCxZQUFRLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxrQkFBa0IsQ0FBQyxDQUFDO0dBQ25ELENBQUMsQ0FBQyIsImZpbGUiOiJodG1sYmFycy1zeW50YXgtdGVzdHMvbG9jLW5vZGUtdGVzdC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHBhcnNlIH0gZnJvbSBcIi4uL2h0bWxiYXJzLXN5bnRheFwiO1xuXG5RVW5pdC5tb2R1bGUoXCJbaHRtbGJhcnMtc3ludGF4XSBQYXJzZXIgLSBMb2NhdGlvbiBJbmZvXCIpO1xuXG5mdW5jdGlvbiBsb2NFcXVhbChub2RlLCBzdGFydExpbmUsIHN0YXJ0Q29sdW1uLCBlbmRMaW5lLCBlbmRDb2x1bW4sIG1lc3NhZ2UpIHtcblxuICB2YXIgZXhwZWN0ZWQgPSB7XG4gICAgc291cmNlOiBudWxsLFxuICAgIHN0YXJ0OiB7IGxpbmU6IHN0YXJ0TGluZSwgY29sdW1uOiBzdGFydENvbHVtbiB9LFxuICAgIGVuZDogeyBsaW5lOiBlbmRMaW5lLCBjb2x1bW46IGVuZENvbHVtbiB9XG4gIH07XG5cbiAgZGVlcEVxdWFsKG5vZGUubG9jLCBleHBlY3RlZCwgbWVzc2FnZSk7XG59XG5cbnRlc3QoXCJwcm9ncmFtc1wiLCBmdW5jdGlvbigpIHtcbiAgdmFyIGFzdCA9IHBhcnNlKGBcbiAge3sjaWYgZm9vfX1cbiAgICB7e2Jhcn19XG4gICAgICAge3svaWZ9fVxuICAgIGApO1xuXG4gIGxvY0VxdWFsKGFzdCwgMSwgMCwgNSwgNCwgJ291dGVyIHByb2dyYW0nKTtcblxuICAvLyBzdGFydENvbHVtbiBzaG91bGQgYmUgMTMgbm90IDIuXG4gIC8vIFRoaXMgc2hvdWxkIGJlIGZpeGVkIHVwc3RyZWFtIGluIEhhbmRsZWJhcnMuXG4gIGxvY0VxdWFsKGFzdC5ib2R5WzFdLnByb2dyYW0sIDIsIDIsIDQsIDcsICduZXN0ZWQgcHJvZ3JhbScpO1xufSk7XG5cbnRlc3QoXCJibG9ja3NcIiwgZnVuY3Rpb24oKSB7XG4gIHZhciBhc3QgPSBwYXJzZShgXG4gIHt7I2lmIGZvb319XG4gICAge3sjaWYgYmFyfX1cbiAgICAgICAgdGVzdFxuICAgICAgICB7e2Vsc2V9fVxuICAgICAgdGVzdFxuICB7ey9pZiAgICB9fVxuICAgICAgIHt7L2lmXG4gICAgICB9fVxuICAgIGApO1xuXG4gIGxvY0VxdWFsKGFzdC5ib2R5WzFdLCAyLCAyLCA5LCA4LCAnb3V0ZXIgYmxvY2snKTtcbiAgbG9jRXF1YWwoYXN0LmJvZHlbMV0ucHJvZ3JhbS5ib2R5WzBdLCAzLCA0LCA3LCAxMywgJ25lc3RlZCBibG9jaycpO1xufSk7XG5cbnRlc3QoXCJtdXN0YWNoZVwiLCBmdW5jdGlvbigpIHtcbiAgdmFyIGFzdCA9IHBhcnNlKGBcbiAgICB7e2Zvb319XG4gICAge3sjaWYgZm9vfX1cbiAgICAgIGJhcjoge3tiYXJcbiAgICAgICAgfX1cbiAgICB7ey9pZn19XG4gIGApO1xuXG4gIGxvY0VxdWFsKGFzdC5ib2R5WzFdLCAyLCA0LCAyLCAxMSwgJ291dGVyIG11c3RhY2hlJyk7XG4gIGxvY0VxdWFsKGFzdC5ib2R5WzNdLnByb2dyYW0uYm9keVsxXSwgNCwgMTEsIDUsIDEwLCAnaW5uZXIgbXVzdGFjaGUnKTtcbn0pO1xuXG50ZXN0KFwiZWxlbWVudCBtb2RpZmllclwiLCBmdW5jdGlvbigpIHtcbiAgdmFyIGFzdCA9IHBhcnNlKGBcbiAgICA8ZGl2IHt7YmluZC1hdHRyXG4gICAgICBmb29cbiAgICAgIGJhcj13YXR9fT48L2Rpdj5cbiAgYCk7XG5cbiAgbG9jRXF1YWwoYXN0LmJvZHlbMV0ubW9kaWZpZXJzWzBdLCAyLCA5LCA0LCAxNSwgJ2VsZW1lbnQgbW9kaWZpZXInKTtcbn0pO1xuXG50ZXN0KFwiaHRtbCBlbGVtZW50c1wiLCBmdW5jdGlvbigpIHtcbiAgdmFyIGFzdCA9IHBhcnNlKGBcbiAgICA8c2VjdGlvbj5cbiAgICAgIDxicj5cbiAgICAgIDxkaXY+XG4gICAgICAgIDxociAvPlxuICAgICAgPC9kaXY+XG4gICAgPC9zZWN0aW9uPlxuICBgKTtcblxuICBsZXQgWyxzZWN0aW9uXSA9IGFzdC5ib2R5O1xuICBsZXQgWyxiciwsZGl2XSA9IHNlY3Rpb24uY2hpbGRyZW47XG4gIGxldCBbLGhyXSA9IGRpdi5jaGlsZHJlbjtcblxuICBsb2NFcXVhbChzZWN0aW9uLCAyLCA0LCA3LCAxNCwgJ3NlY3Rpb24gZWxlbWVudCcpO1xuICBsb2NFcXVhbChiciwgMywgNiwgMywgMTAsICdiciBlbGVtZW50Jyk7XG4gIGxvY0VxdWFsKGRpdiwgNCwgNiwgNiwgMTIsICdkaXYgZWxlbWVudCcpO1xuICBsb2NFcXVhbChociwgNSwgOCwgNSwgMTQsICdociBlbGVtZW50Jyk7XG59KTtcblxudGVzdChcImNvbXBvbmVudHNcIiwgZnVuY3Rpb24oKSB7XG4gIHZhciBhc3QgPSBwYXJzZShgXG4gICAgPGVsLXBhZ2U+XG4gICAgICA8ZWwtaGVhZGVyPjwvZWwtaGVhZGVyPlxuICAgICAgPGVsLWlucHV0IC8+XG4gICAgICA8ZWwtZm9vdGVyPlxuICAgICAgICAgIDwvZWwtZm9vdGVyPlxuICAgIDwvZWwtcGFnZT5cbiAgYCk7XG5cbiAgbGV0IFsscGFnZV0gPSBhc3QuYm9keTtcbiAgbGV0IFssaGVhZGVyLCxpbnB1dCwsZm9vdGVyXSA9IHBhZ2UucHJvZ3JhbS5ib2R5O1xuXG4gIGxvY0VxdWFsKHBhZ2UsIDIsIDQsIDcsIDE0LCAncGFnZSBjb21wb25lbnQnKTtcbiAgbG9jRXF1YWwoaGVhZGVyLCAzLCA2LCAzLCAyOSwgJ2hlYWRlciBjb21wb25lbnQnKTtcbiAgbG9jRXF1YWwoaW5wdXQsIDQsIDYsIDQsIDE4LCAnaW5wdXQgY29tcG9uZW50Jyk7XG4gIGxvY0VxdWFsKGZvb3RlciwgNSwgNiwgNiwgMjIsICdmb290ZXIgY29tcG9uZW50Jyk7XG59KTtcbiJdfQ==
define('htmlbars-syntax-tests/loc-node-test.jshint', ['exports'], function (exports) {
  module('JSHint - htmlbars-syntax-tests');
  test('htmlbars-syntax-tests/loc-node-test.js should pass jshint', function () {
    ok(true, 'htmlbars-syntax-tests/loc-node-test.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXN5bnRheC10ZXN0cy9sb2Mtbm9kZS10ZXN0LmpzaGludC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsUUFBTSxDQUFDLGdDQUFnQyxDQUFDLENBQUM7QUFDekMsTUFBSSxDQUFDLDJEQUEyRCxFQUFFLFlBQVc7QUFDM0UsTUFBRSxDQUFDLElBQUksRUFBRSw0REFBNEQsQ0FBQyxDQUFDO0dBQ3hFLENBQUMsQ0FBQyIsImZpbGUiOiJodG1sYmFycy1zeW50YXgtdGVzdHMvbG9jLW5vZGUtdGVzdC5qc2hpbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUoJ0pTSGludCAtIGh0bWxiYXJzLXN5bnRheC10ZXN0cycpO1xudGVzdCgnaHRtbGJhcnMtc3ludGF4LXRlc3RzL2xvYy1ub2RlLXRlc3QuanMgc2hvdWxkIHBhc3MganNoaW50JywgZnVuY3Rpb24oKSB7IFxuICBvayh0cnVlLCAnaHRtbGJhcnMtc3ludGF4LXRlc3RzL2xvYy1ub2RlLXRlc3QuanMgc2hvdWxkIHBhc3MganNoaW50LicpOyBcbn0pO1xuIl19
define("htmlbars-syntax-tests/parser-node-test", ["exports", "../htmlbars-syntax/handlebars/compiler/base", "../htmlbars-syntax", "../htmlbars-syntax/builders", "./support"], function (exports, _htmlbarsSyntaxHandlebarsCompilerBase, _htmlbarsSyntax, _htmlbarsSyntaxBuilders, _support) {

  QUnit.module("[htmlbars-syntax] HTML-based compiler (AST)");

  test("a simple piece of content", function () {
    var t = 'some content';
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.text('some content')]));
  });

  test("allow simple AST to be passed", function () {
    var ast = _htmlbarsSyntax.parse(_htmlbarsSyntaxHandlebarsCompilerBase.parse("simple"));

    _support.astEqual(ast, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.text("simple")]));
  });

  test("allow an AST with mustaches to be passed", function () {
    var ast = _htmlbarsSyntax.parse(_htmlbarsSyntaxHandlebarsCompilerBase.parse("<h1>some</h1> ast {{foo}}"));

    _support.astEqual(ast, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.element("h1", [], [], [_htmlbarsSyntaxBuilders.default.text("some")]), _htmlbarsSyntaxBuilders.default.text(" ast "), _htmlbarsSyntaxBuilders.default.mustache(_htmlbarsSyntaxBuilders.default.path('foo'))]));
  });

  test("self-closed element", function () {
    var t = '<g />';
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.element("g")]));
  });

  test("elements can have empty attributes", function () {
    var t = '<img id="">';
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.element("img", [_htmlbarsSyntaxBuilders.default.attr("id", _htmlbarsSyntaxBuilders.default.text(""))])]));
  });

  test("svg content", function () {
    var t = "<svg></svg>";
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.element("svg")]));
  });

  test("html content with html content inline", function () {
    var t = '<div><p></p></div>';
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.element("div", [], [], [_htmlbarsSyntaxBuilders.default.element("p")])]));
  });

  test("html content with svg content inline", function () {
    var t = '<div><svg></svg></div>';
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.element("div", [], [], [_htmlbarsSyntaxBuilders.default.element("svg")])]));
  });

  var integrationPoints = ['foreignObject', 'desc', 'title'];
  function buildIntegrationPointTest(integrationPoint) {
    return function integrationPointTest() {
      var t = '<svg><' + integrationPoint + '><div></div></' + integrationPoint + '></svg>';
      _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.element("svg", [], [], [_htmlbarsSyntaxBuilders.default.element(integrationPoint, [], [], [_htmlbarsSyntaxBuilders.default.element("div")])])]));
    };
  }
  for (var i = 0, length = integrationPoints.length; i < length; i++) {
    test("svg content with html content inline for " + integrationPoints[i], buildIntegrationPointTest(integrationPoints[i]));
  }

  test("a piece of content with HTML", function () {
    var t = 'some <div>content</div> done';
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.text("some "), _htmlbarsSyntaxBuilders.default.element("div", [], [], [_htmlbarsSyntaxBuilders.default.text("content")]), _htmlbarsSyntaxBuilders.default.text(" done")]));
  });

  test("a piece of Handlebars with HTML", function () {
    var t = 'some <div>{{content}}</div> done';
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.text("some "), _htmlbarsSyntaxBuilders.default.element("div", [], [], [_htmlbarsSyntaxBuilders.default.mustache(_htmlbarsSyntaxBuilders.default.path('content'))]), _htmlbarsSyntaxBuilders.default.text(" done")]));
  });

  test("Handlebars embedded in an attribute (quoted)", function () {
    var t = 'some <div class="{{foo}}">content</div> done';
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.text("some "), _htmlbarsSyntaxBuilders.default.element("div", [_htmlbarsSyntaxBuilders.default.attr("class", _htmlbarsSyntaxBuilders.default.concat([_htmlbarsSyntaxBuilders.default.path('foo')]))], [], [_htmlbarsSyntaxBuilders.default.text("content")]), _htmlbarsSyntaxBuilders.default.text(" done")]));
  });

  test("Handlebars embedded in an attribute (unquoted)", function () {
    var t = 'some <div class={{foo}}>content</div> done';
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.text("some "), _htmlbarsSyntaxBuilders.default.element("div", [_htmlbarsSyntaxBuilders.default.attr("class", _htmlbarsSyntaxBuilders.default.mustache(_htmlbarsSyntaxBuilders.default.path('foo')))], [], [_htmlbarsSyntaxBuilders.default.text("content")]), _htmlbarsSyntaxBuilders.default.text(" done")]));
  });

  test("Handlebars embedded in an attribute (sexprs)", function () {
    var t = 'some <div class="{{foo (foo "abc")}}">content</div> done';
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.text("some "), _htmlbarsSyntaxBuilders.default.element("div", [_htmlbarsSyntaxBuilders.default.attr("class", _htmlbarsSyntaxBuilders.default.concat([_htmlbarsSyntaxBuilders.default.mustache(_htmlbarsSyntaxBuilders.default.path('foo'), [_htmlbarsSyntaxBuilders.default.sexpr(_htmlbarsSyntaxBuilders.default.path('foo'), [_htmlbarsSyntaxBuilders.default.string('abc')])])]))], [], [_htmlbarsSyntaxBuilders.default.text("content")]), _htmlbarsSyntaxBuilders.default.text(" done")]));
  });

  test("Handlebars embedded in an attribute with other content surrounding it", function () {
    var t = 'some <a href="http://{{link}}/">content</a> done';
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.text("some "), _htmlbarsSyntaxBuilders.default.element("a", [_htmlbarsSyntaxBuilders.default.attr("href", _htmlbarsSyntaxBuilders.default.concat([_htmlbarsSyntaxBuilders.default.string("http://"), _htmlbarsSyntaxBuilders.default.path('link'), _htmlbarsSyntaxBuilders.default.string("/")]))], [], [_htmlbarsSyntaxBuilders.default.text("content")]), _htmlbarsSyntaxBuilders.default.text(" done")]));
  });

  test("A more complete embedding example", function () {
    var t = "{{embed}} {{some 'content'}} " + "<div class='{{foo}} {{bind-class isEnabled truthy='enabled'}}'>{{ content }}</div>" + " {{more 'embed'}}";
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.mustache(_htmlbarsSyntaxBuilders.default.path('embed')), _htmlbarsSyntaxBuilders.default.text(' '), _htmlbarsSyntaxBuilders.default.mustache(_htmlbarsSyntaxBuilders.default.path('some'), [_htmlbarsSyntaxBuilders.default.string('content')]), _htmlbarsSyntaxBuilders.default.text(' '), _htmlbarsSyntaxBuilders.default.element("div", [_htmlbarsSyntaxBuilders.default.attr("class", _htmlbarsSyntaxBuilders.default.concat([_htmlbarsSyntaxBuilders.default.path('foo'), _htmlbarsSyntaxBuilders.default.string(' '), _htmlbarsSyntaxBuilders.default.mustache(_htmlbarsSyntaxBuilders.default.path('bind-class'), [_htmlbarsSyntaxBuilders.default.path('isEnabled')], _htmlbarsSyntaxBuilders.default.hash([_htmlbarsSyntaxBuilders.default.pair('truthy', _htmlbarsSyntaxBuilders.default.string('enabled'))]))]))], [], [_htmlbarsSyntaxBuilders.default.mustache(_htmlbarsSyntaxBuilders.default.path('content'))]), _htmlbarsSyntaxBuilders.default.text(' '), _htmlbarsSyntaxBuilders.default.mustache(_htmlbarsSyntaxBuilders.default.path('more'), [_htmlbarsSyntaxBuilders.default.string('embed')])]));
  });

  test("Simple embedded block helpers", function () {
    var t = "{{#if foo}}<div>{{content}}</div>{{/if}}";
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.block(_htmlbarsSyntaxBuilders.default.path('if'), [_htmlbarsSyntaxBuilders.default.path('foo')], _htmlbarsSyntaxBuilders.default.hash(), _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.element('div', [], [], [_htmlbarsSyntaxBuilders.default.mustache(_htmlbarsSyntaxBuilders.default.path('content'))])]))]));
  });

  test("Involved block helper", function () {
    var t = '<p>hi</p> content {{#testing shouldRender}}<p>Appears!</p>{{/testing}} more <em>content</em> here';
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.element('p', [], [], [_htmlbarsSyntaxBuilders.default.text('hi')]), _htmlbarsSyntaxBuilders.default.text(' content '), _htmlbarsSyntaxBuilders.default.block(_htmlbarsSyntaxBuilders.default.path('testing'), [_htmlbarsSyntaxBuilders.default.path('shouldRender')], _htmlbarsSyntaxBuilders.default.hash(), _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.element('p', [], [], [_htmlbarsSyntaxBuilders.default.text('Appears!')])])), _htmlbarsSyntaxBuilders.default.text(' more '), _htmlbarsSyntaxBuilders.default.element('em', [], [], [_htmlbarsSyntaxBuilders.default.text('content')]), _htmlbarsSyntaxBuilders.default.text(' here')]));
  });

  test("Element modifiers", function () {
    var t = "<p {{action 'boom'}} class='bar'>Some content</p>";
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.element('p', [_htmlbarsSyntaxBuilders.default.attr('class', _htmlbarsSyntaxBuilders.default.text('bar'))], [_htmlbarsSyntaxBuilders.default.elementModifier(_htmlbarsSyntaxBuilders.default.path('action'), [_htmlbarsSyntaxBuilders.default.string('boom')])], [_htmlbarsSyntaxBuilders.default.text('Some content')])]));
  });

  test("Tokenizer: MustacheStatement encountered in tagName state", function () {
    var t = "<input{{bar}}>";
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.element('input', [], [_htmlbarsSyntaxBuilders.default.elementModifier(_htmlbarsSyntaxBuilders.default.path('bar'))])]));
  });

  test("Tokenizer: MustacheStatement encountered in beforeAttributeName state", function () {
    var t = "<input {{bar}}>";
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.element('input', [], [_htmlbarsSyntaxBuilders.default.elementModifier(_htmlbarsSyntaxBuilders.default.path('bar'))])]));
  });

  test("Tokenizer: MustacheStatement encountered in attributeName state", function () {
    var t = "<input foo{{bar}}>";
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.element('input', [_htmlbarsSyntaxBuilders.default.attr('foo', _htmlbarsSyntaxBuilders.default.text(''))], [_htmlbarsSyntaxBuilders.default.elementModifier(_htmlbarsSyntaxBuilders.default.path('bar'))])]));
  });

  test("Tokenizer: MustacheStatement encountered in afterAttributeName state", function () {
    var t = "<input foo {{bar}}>";
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.element('input', [_htmlbarsSyntaxBuilders.default.attr('foo', _htmlbarsSyntaxBuilders.default.text(''))], [_htmlbarsSyntaxBuilders.default.elementModifier(_htmlbarsSyntaxBuilders.default.path('bar'))])]));
  });

  test("Tokenizer: MustacheStatement encountered in afterAttributeValue state", function () {
    var t = "<input foo=1 {{bar}}>";
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.element('input', [_htmlbarsSyntaxBuilders.default.attr('foo', _htmlbarsSyntaxBuilders.default.text('1'))], [_htmlbarsSyntaxBuilders.default.elementModifier(_htmlbarsSyntaxBuilders.default.path('bar'))])]));
  });

  test("Tokenizer: MustacheStatement encountered in afterAttributeValueQuoted state", function () {
    var t = "<input foo='1'{{bar}}>";
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.element('input', [_htmlbarsSyntaxBuilders.default.attr('foo', _htmlbarsSyntaxBuilders.default.text('1'))], [_htmlbarsSyntaxBuilders.default.elementModifier(_htmlbarsSyntaxBuilders.default.path('bar'))])]));
  });

  test("Stripping - mustaches", function () {
    var t = "foo {{~content}} bar";
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.text('foo'), _htmlbarsSyntaxBuilders.default.mustache(_htmlbarsSyntaxBuilders.default.path('content')), _htmlbarsSyntaxBuilders.default.text(' bar')]));

    t = "foo {{content~}} bar";
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.text('foo '), _htmlbarsSyntaxBuilders.default.mustache(_htmlbarsSyntaxBuilders.default.path('content')), _htmlbarsSyntaxBuilders.default.text('bar')]));
  });

  test("Stripping - blocks", function () {
    var t = "foo {{~#wat}}{{/wat}} bar";
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.text('foo'), _htmlbarsSyntaxBuilders.default.block(_htmlbarsSyntaxBuilders.default.path('wat'), [], _htmlbarsSyntaxBuilders.default.hash(), _htmlbarsSyntaxBuilders.default.program()), _htmlbarsSyntaxBuilders.default.text(' bar')]));

    t = "foo {{#wat}}{{/wat~}} bar";
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.text('foo '), _htmlbarsSyntaxBuilders.default.block(_htmlbarsSyntaxBuilders.default.path('wat'), [], _htmlbarsSyntaxBuilders.default.hash(), _htmlbarsSyntaxBuilders.default.program()), _htmlbarsSyntaxBuilders.default.text('bar')]));
  });

  test("Stripping - programs", function () {
    var t = "{{#wat~}} foo {{else}}{{/wat}}";
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.block(_htmlbarsSyntaxBuilders.default.path('wat'), [], _htmlbarsSyntaxBuilders.default.hash(), _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.text('foo ')]), _htmlbarsSyntaxBuilders.default.program())]));

    t = "{{#wat}} foo {{~else}}{{/wat}}";
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.block(_htmlbarsSyntaxBuilders.default.path('wat'), [], _htmlbarsSyntaxBuilders.default.hash(), _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.text(' foo')]), _htmlbarsSyntaxBuilders.default.program())]));

    t = "{{#wat}}{{else~}} foo {{/wat}}";
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.block(_htmlbarsSyntaxBuilders.default.path('wat'), [], _htmlbarsSyntaxBuilders.default.hash(), _htmlbarsSyntaxBuilders.default.program(), _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.text('foo ')]))]));

    t = "{{#wat}}{{else}} foo {{~/wat}}";
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.block(_htmlbarsSyntaxBuilders.default.path('wat'), [], _htmlbarsSyntaxBuilders.default.hash(), _htmlbarsSyntaxBuilders.default.program(), _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.text(' foo')]))]));
  });

  test("Stripping - removes unnecessary text nodes", function () {
    var t = "{{#each~}}\n  <li> foo </li>\n{{~/each}}";
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.block(_htmlbarsSyntaxBuilders.default.path('each'), [], _htmlbarsSyntaxBuilders.default.hash(), _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.element('li', [], [], [_htmlbarsSyntaxBuilders.default.text(' foo ')])]))]));
  });

  // TODO: Make these throw an error.
  //test("Awkward mustache in unquoted attribute value", function() {
  //  var t = "<div class=a{{foo}}></div>";
  //  astEqual(t, b.program([
  //    b.element('div', [ b.attr('class', concat([b.string("a"), b.sexpr([b.path('foo')])])) ])
  //  ]));
  //
  //  t = "<div class=a{{foo}}b></div>";
  //  astEqual(t, b.program([
  //    b.element('div', [ b.attr('class', concat([b.string("a"), b.sexpr([b.path('foo')]), b.string("b")])) ])
  //  ]));
  //
  //  t = "<div class={{foo}}b></div>";
  //  astEqual(t, b.program([
  //    b.element('div', [ b.attr('class', concat([b.sexpr([b.path('foo')]), b.string("b")])) ])
  //  ]));
  //});

  test("Components", function () {
    var t = "<x-foo a=b c='d' e={{f}} id='{{bar}}' class='foo-{{bar}}'>{{a}}{{b}}c{{d}}</x-foo>{{e}}";
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.component('x-foo', [_htmlbarsSyntaxBuilders.default.attr('a', _htmlbarsSyntaxBuilders.default.text('b')), _htmlbarsSyntaxBuilders.default.attr('c', _htmlbarsSyntaxBuilders.default.text('d')), _htmlbarsSyntaxBuilders.default.attr('e', _htmlbarsSyntaxBuilders.default.mustache(_htmlbarsSyntaxBuilders.default.path('f'))), _htmlbarsSyntaxBuilders.default.attr('id', _htmlbarsSyntaxBuilders.default.concat([_htmlbarsSyntaxBuilders.default.path('bar')])), _htmlbarsSyntaxBuilders.default.attr('class', _htmlbarsSyntaxBuilders.default.concat([_htmlbarsSyntaxBuilders.default.string('foo-'), _htmlbarsSyntaxBuilders.default.path('bar')]))], _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.mustache(_htmlbarsSyntaxBuilders.default.path('a')), _htmlbarsSyntaxBuilders.default.mustache(_htmlbarsSyntaxBuilders.default.path('b')), _htmlbarsSyntaxBuilders.default.text('c'), _htmlbarsSyntaxBuilders.default.mustache(_htmlbarsSyntaxBuilders.default.path('d'))])), _htmlbarsSyntaxBuilders.default.mustache(_htmlbarsSyntaxBuilders.default.path('e'))]));
  });

  test("Components with disableComponentGeneration", function () {
    var t = "begin <x-foo>content</x-foo> finish";
    var actual = _htmlbarsSyntax.parse(t, {
      disableComponentGeneration: true
    });

    _support.astEqual(actual, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.text("begin "), _htmlbarsSyntaxBuilders.default.element("x-foo", [], [], [_htmlbarsSyntaxBuilders.default.text("content")]), _htmlbarsSyntaxBuilders.default.text(" finish")]));
  });

  test("Components with disableComponentGeneration === false", function () {
    var t = "begin <x-foo>content</x-foo> finish";
    var actual = _htmlbarsSyntax.parse(t, {
      disableComponentGeneration: false
    });

    _support.astEqual(actual, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.text("begin "), _htmlbarsSyntaxBuilders.default.component("x-foo", [], _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.text("content")])), _htmlbarsSyntaxBuilders.default.text(" finish")]));
  });

  test("an HTML comment", function () {
    var t = 'before <!-- some comment --> after';
    _support.astEqual(t, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.text("before "), _htmlbarsSyntaxBuilders.default.comment(" some comment "), _htmlbarsSyntaxBuilders.default.text(" after")]));
  });

  test("allow {{null}} to be passed as helper name", function () {
    var ast = _htmlbarsSyntax.parse("{{null}}");

    _support.astEqual(ast, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.mustache(_htmlbarsSyntaxBuilders.default.null())]));
  });

  test("allow {{null}} to be passed as a param", function () {
    var ast = _htmlbarsSyntax.parse("{{foo null}}");

    _support.astEqual(ast, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.mustache(_htmlbarsSyntaxBuilders.default.path('foo'), [_htmlbarsSyntaxBuilders.default.null()])]));
  });

  test("allow {{undefined}} to be passed as helper name", function () {
    var ast = _htmlbarsSyntax.parse("{{undefined}}");

    _support.astEqual(ast, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.mustache(_htmlbarsSyntaxBuilders.default.undefined())]));
  });

  test("allow {{undefined}} to be passed as a param", function () {
    var ast = _htmlbarsSyntax.parse("{{foo undefined}}");

    _support.astEqual(ast, _htmlbarsSyntaxBuilders.default.program([_htmlbarsSyntaxBuilders.default.mustache(_htmlbarsSyntaxBuilders.default.path('foo'), [_htmlbarsSyntaxBuilders.default.undefined()])]));
  });
});
//# sourceMappingURL=data:application/json;base64,
define('htmlbars-syntax-tests/parser-node-test.jshint', ['exports'], function (exports) {
  module('JSHint - htmlbars-syntax-tests');
  test('htmlbars-syntax-tests/parser-node-test.js should pass jshint', function () {
    ok(true, 'htmlbars-syntax-tests/parser-node-test.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXN5bnRheC10ZXN0cy9wYXJzZXItbm9kZS10ZXN0LmpzaGludC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsUUFBTSxDQUFDLGdDQUFnQyxDQUFDLENBQUM7QUFDekMsTUFBSSxDQUFDLDhEQUE4RCxFQUFFLFlBQVc7QUFDOUUsTUFBRSxDQUFDLElBQUksRUFBRSwrREFBK0QsQ0FBQyxDQUFDO0dBQzNFLENBQUMsQ0FBQyIsImZpbGUiOiJodG1sYmFycy1zeW50YXgtdGVzdHMvcGFyc2VyLW5vZGUtdGVzdC5qc2hpbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUoJ0pTSGludCAtIGh0bWxiYXJzLXN5bnRheC10ZXN0cycpO1xudGVzdCgnaHRtbGJhcnMtc3ludGF4LXRlc3RzL3BhcnNlci1ub2RlLXRlc3QuanMgc2hvdWxkIHBhc3MganNoaW50JywgZnVuY3Rpb24oKSB7IFxuICBvayh0cnVlLCAnaHRtbGJhcnMtc3ludGF4LXRlc3RzL3BhcnNlci1ub2RlLXRlc3QuanMgc2hvdWxkIHBhc3MganNoaW50LicpOyBcbn0pO1xuIl19
define('htmlbars-syntax-tests/plugin-node-test', ['exports', '../htmlbars-syntax'], function (exports, _htmlbarsSyntax) {

  QUnit.module('[htmlbars-syntax] Compiler plugins: AST');

  test('AST plugins can be provided to the compiler', function () {
    expect(1);

    function Plugin() {}
    Plugin.prototype.transform = function () {
      ok(true, 'transform was called!');
    };

    _htmlbarsSyntax.parse('<div></div>', {
      plugins: {
        ast: [Plugin]
      }
    });
  });

  test('provides syntax package as `syntax` prop if value is null', function () {
    expect(1);

    function Plugin() {}
    Plugin.prototype.transform = function () {
      equal(this.syntax.Walker, _htmlbarsSyntax.Walker);
    };

    _htmlbarsSyntax.parse('<div></div>', {
      plugins: {
        ast: [Plugin]
      }
    });
  });

  test('AST plugins can modify the AST', function () {
    expect(1);

    var expected = "OOOPS, MESSED THAT UP!";

    function Plugin() {}
    Plugin.prototype.transform = function () {
      return expected;
    };

    var ast = _htmlbarsSyntax.parse('<div></div>', {
      plugins: {
        ast: [Plugin]
      }
    });

    equal(ast, expected, 'return value from AST transform is used');
  });

  test('AST plugins can be chained', function () {
    expect(2);

    var expected = "OOOPS, MESSED THAT UP!";

    function Plugin() {}
    Plugin.prototype.transform = function () {
      return expected;
    };

    function SecondaryPlugin() {}
    SecondaryPlugin.prototype.transform = function (ast) {
      equal(ast, expected, 'return value from AST transform is used');

      return 'BOOM!';
    };

    var ast = _htmlbarsSyntax.parse('<div></div>', {
      plugins: {
        ast: [Plugin, SecondaryPlugin]
      }
    });

    equal(ast, 'BOOM!', 'return value from last AST transform is used');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXN5bnRheC10ZXN0cy9wbHVnaW4tbm9kZS10ZXN0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEsT0FBSyxDQUFDLE1BQU0sQ0FBQyx5Q0FBeUMsQ0FBQyxDQUFDOztBQUV4RCxNQUFJLENBQUMsNkNBQTZDLEVBQUUsWUFBVztBQUM3RCxVQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7O0FBRVYsYUFBUyxNQUFNLEdBQUcsRUFBRztBQUNyQixVQUFNLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxZQUFXO0FBQ3RDLFFBQUUsQ0FBQyxJQUFJLEVBQUUsdUJBQXVCLENBQUMsQ0FBQztLQUNuQyxDQUFDOztBQUVGLG9CQVpPLEtBQUssQ0FZTixhQUFhLEVBQUU7QUFDbkIsYUFBTyxFQUFFO0FBQ1AsV0FBRyxFQUFFLENBQUUsTUFBTSxDQUFFO09BQ2hCO0tBQ0YsQ0FBQyxDQUFDO0dBQ0osQ0FBQyxDQUFDOztBQUVILE1BQUksQ0FBQywyREFBMkQsRUFBRSxZQUFXO0FBQzNFLFVBQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQzs7QUFFVixhQUFTLE1BQU0sR0FBRyxFQUFHO0FBQ3JCLFVBQU0sQ0FBQyxTQUFTLENBQUMsU0FBUyxHQUFHLFlBQVc7QUFDdEMsV0FBSyxDQUFDLElBQUksQ0FBQyxNQUFNLENBQUMsTUFBTSxrQkF4QlosTUFBTSxDQXdCZSxDQUFDO0tBQ25DLENBQUM7O0FBRUYsb0JBM0JPLEtBQUssQ0EyQk4sYUFBYSxFQUFFO0FBQ25CLGFBQU8sRUFBRTtBQUNQLFdBQUcsRUFBRSxDQUFFLE1BQU0sQ0FBRTtPQUNoQjtLQUNGLENBQUMsQ0FBQztHQUNKLENBQUMsQ0FBQzs7QUFFSCxNQUFJLENBQUMsZ0NBQWdDLEVBQUUsWUFBVztBQUNoRCxVQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7O0FBRVYsUUFBSSxRQUFRLEdBQUcsd0JBQXdCLENBQUM7O0FBRXhDLGFBQVMsTUFBTSxHQUFHLEVBQUc7QUFDckIsVUFBTSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEdBQUcsWUFBVztBQUN0QyxhQUFPLFFBQVEsQ0FBQztLQUNqQixDQUFDOztBQUVGLFFBQUksR0FBRyxHQUFHLGdCQTVDSCxLQUFLLENBNENJLGFBQWEsRUFBRTtBQUM3QixhQUFPLEVBQUU7QUFDUCxXQUFHLEVBQUUsQ0FBRSxNQUFNLENBQUU7T0FDaEI7S0FDRixDQUFDLENBQUM7O0FBRUgsU0FBSyxDQUFDLEdBQUcsRUFBRSxRQUFRLEVBQUUseUNBQXlDLENBQUMsQ0FBQztHQUNqRSxDQUFDLENBQUM7O0FBRUgsTUFBSSxDQUFDLDRCQUE0QixFQUFFLFlBQVc7QUFDNUMsVUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDOztBQUVWLFFBQUksUUFBUSxHQUFHLHdCQUF3QixDQUFDOztBQUV4QyxhQUFTLE1BQU0sR0FBRyxFQUFHO0FBQ3JCLFVBQU0sQ0FBQyxTQUFTLENBQUMsU0FBUyxHQUFHLFlBQVc7QUFDdEMsYUFBTyxRQUFRLENBQUM7S0FDakIsQ0FBQzs7QUFFRixhQUFTLGVBQWUsR0FBRyxFQUFHO0FBQzlCLG1CQUFlLENBQUMsU0FBUyxDQUFDLFNBQVMsR0FBRyxVQUFTLEdBQUcsRUFBRTtBQUNsRCxXQUFLLENBQUMsR0FBRyxFQUFFLFFBQVEsRUFBRSx5Q0FBeUMsQ0FBQyxDQUFDOztBQUVoRSxhQUFPLE9BQU8sQ0FBQztLQUNoQixDQUFDOztBQUVGLFFBQUksR0FBRyxHQUFHLGdCQXRFSCxLQUFLLENBc0VJLGFBQWEsRUFBRTtBQUM3QixhQUFPLEVBQUU7QUFDUCxXQUFHLEVBQUUsQ0FDSCxNQUFNLEVBQ04sZUFBZSxDQUNoQjtPQUNGO0tBQ0YsQ0FBQyxDQUFDOztBQUVILFNBQUssQ0FBQyxHQUFHLEVBQUUsT0FBTyxFQUFFLDhDQUE4QyxDQUFDLENBQUM7R0FDckUsQ0FBQyxDQUFDIiwiZmlsZSI6Imh0bWxiYXJzLXN5bnRheC10ZXN0cy9wbHVnaW4tbm9kZS10ZXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcGFyc2UsIFdhbGtlciB9IGZyb20gJy4uL2h0bWxiYXJzLXN5bnRheCc7XG5cblFVbml0Lm1vZHVsZSgnW2h0bWxiYXJzLXN5bnRheF0gQ29tcGlsZXIgcGx1Z2luczogQVNUJyk7XG5cbnRlc3QoJ0FTVCBwbHVnaW5zIGNhbiBiZSBwcm92aWRlZCB0byB0aGUgY29tcGlsZXInLCBmdW5jdGlvbigpIHtcbiAgZXhwZWN0KDEpO1xuXG4gIGZ1bmN0aW9uIFBsdWdpbigpIHsgfVxuICBQbHVnaW4ucHJvdG90eXBlLnRyYW5zZm9ybSA9IGZ1bmN0aW9uKCkge1xuICAgIG9rKHRydWUsICd0cmFuc2Zvcm0gd2FzIGNhbGxlZCEnKTtcbiAgfTtcblxuICBwYXJzZSgnPGRpdj48L2Rpdj4nLCB7XG4gICAgcGx1Z2luczoge1xuICAgICAgYXN0OiBbIFBsdWdpbiBdXG4gICAgfVxuICB9KTtcbn0pO1xuXG50ZXN0KCdwcm92aWRlcyBzeW50YXggcGFja2FnZSBhcyBgc3ludGF4YCBwcm9wIGlmIHZhbHVlIGlzIG51bGwnLCBmdW5jdGlvbigpIHtcbiAgZXhwZWN0KDEpO1xuXG4gIGZ1bmN0aW9uIFBsdWdpbigpIHsgfVxuICBQbHVnaW4ucHJvdG90eXBlLnRyYW5zZm9ybSA9IGZ1bmN0aW9uKCkge1xuICAgIGVxdWFsKHRoaXMuc3ludGF4LldhbGtlciwgV2Fsa2VyKTtcbiAgfTtcblxuICBwYXJzZSgnPGRpdj48L2Rpdj4nLCB7XG4gICAgcGx1Z2luczoge1xuICAgICAgYXN0OiBbIFBsdWdpbiBdXG4gICAgfVxuICB9KTtcbn0pO1xuXG50ZXN0KCdBU1QgcGx1Z2lucyBjYW4gbW9kaWZ5IHRoZSBBU1QnLCBmdW5jdGlvbigpIHtcbiAgZXhwZWN0KDEpO1xuXG4gIHZhciBleHBlY3RlZCA9IFwiT09PUFMsIE1FU1NFRCBUSEFUIFVQIVwiO1xuXG4gIGZ1bmN0aW9uIFBsdWdpbigpIHsgfVxuICBQbHVnaW4ucHJvdG90eXBlLnRyYW5zZm9ybSA9IGZ1bmN0aW9uKCkge1xuICAgIHJldHVybiBleHBlY3RlZDtcbiAgfTtcblxuICB2YXIgYXN0ID0gcGFyc2UoJzxkaXY+PC9kaXY+Jywge1xuICAgIHBsdWdpbnM6IHtcbiAgICAgIGFzdDogWyBQbHVnaW4gXVxuICAgIH1cbiAgfSk7XG5cbiAgZXF1YWwoYXN0LCBleHBlY3RlZCwgJ3JldHVybiB2YWx1ZSBmcm9tIEFTVCB0cmFuc2Zvcm0gaXMgdXNlZCcpO1xufSk7XG5cbnRlc3QoJ0FTVCBwbHVnaW5zIGNhbiBiZSBjaGFpbmVkJywgZnVuY3Rpb24oKSB7XG4gIGV4cGVjdCgyKTtcblxuICB2YXIgZXhwZWN0ZWQgPSBcIk9PT1BTLCBNRVNTRUQgVEhBVCBVUCFcIjtcblxuICBmdW5jdGlvbiBQbHVnaW4oKSB7IH1cbiAgUGx1Z2luLnByb3RvdHlwZS50cmFuc2Zvcm0gPSBmdW5jdGlvbigpIHtcbiAgICByZXR1cm4gZXhwZWN0ZWQ7XG4gIH07XG5cbiAgZnVuY3Rpb24gU2Vjb25kYXJ5UGx1Z2luKCkgeyB9XG4gIFNlY29uZGFyeVBsdWdpbi5wcm90b3R5cGUudHJhbnNmb3JtID0gZnVuY3Rpb24oYXN0KSB7XG4gICAgZXF1YWwoYXN0LCBleHBlY3RlZCwgJ3JldHVybiB2YWx1ZSBmcm9tIEFTVCB0cmFuc2Zvcm0gaXMgdXNlZCcpO1xuXG4gICAgcmV0dXJuICdCT09NISc7XG4gIH07XG5cbiAgdmFyIGFzdCA9IHBhcnNlKCc8ZGl2PjwvZGl2PicsIHtcbiAgICBwbHVnaW5zOiB7XG4gICAgICBhc3Q6IFsgXG4gICAgICAgIFBsdWdpbixcbiAgICAgICAgU2Vjb25kYXJ5UGx1Z2luXG4gICAgICBdXG4gICAgfVxuICB9KTtcblxuICBlcXVhbChhc3QsICdCT09NIScsICdyZXR1cm4gdmFsdWUgZnJvbSBsYXN0IEFTVCB0cmFuc2Zvcm0gaXMgdXNlZCcpO1xufSk7XG4iXX0=
define('htmlbars-syntax-tests/plugin-node-test.jshint', ['exports'], function (exports) {
  module('JSHint - htmlbars-syntax-tests');
  test('htmlbars-syntax-tests/plugin-node-test.js should pass jshint', function () {
    ok(true, 'htmlbars-syntax-tests/plugin-node-test.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXN5bnRheC10ZXN0cy9wbHVnaW4tbm9kZS10ZXN0LmpzaGludC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsUUFBTSxDQUFDLGdDQUFnQyxDQUFDLENBQUM7QUFDekMsTUFBSSxDQUFDLDhEQUE4RCxFQUFFLFlBQVc7QUFDOUUsTUFBRSxDQUFDLElBQUksRUFBRSwrREFBK0QsQ0FBQyxDQUFDO0dBQzNFLENBQUMsQ0FBQyIsImZpbGUiOiJodG1sYmFycy1zeW50YXgtdGVzdHMvcGx1Z2luLW5vZGUtdGVzdC5qc2hpbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUoJ0pTSGludCAtIGh0bWxiYXJzLXN5bnRheC10ZXN0cycpO1xudGVzdCgnaHRtbGJhcnMtc3ludGF4LXRlc3RzL3BsdWdpbi1ub2RlLXRlc3QuanMgc2hvdWxkIHBhc3MganNoaW50JywgZnVuY3Rpb24oKSB7IFxuICBvayh0cnVlLCAnaHRtbGJhcnMtc3ludGF4LXRlc3RzL3BsdWdpbi1ub2RlLXRlc3QuanMgc2hvdWxkIHBhc3MganNoaW50LicpOyBcbn0pO1xuIl19
define('htmlbars-syntax-tests/support', ['exports', '../htmlbars-syntax'], function (exports, _htmlbarsSyntax) {
  exports.astEqual = astEqual;

  function normalizeNode(obj) {
    if (obj && typeof obj === 'object') {
      var newObj;
      if (obj.splice) {
        newObj = new Array(obj.length);

        for (var i = 0; i < obj.length; i++) {
          newObj[i] = normalizeNode(obj[i]);
        }
      } else {
        newObj = {};

        for (var key in obj) {
          if (obj.hasOwnProperty(key)) {
            newObj[key] = normalizeNode(obj[key]);
          }
        }

        if (newObj.type) {
          newObj._type = newObj.type;
          delete newObj.type;
        }

        delete newObj.loc;
      }
      return newObj;
    } else {
      return obj;
    }
  }

  function astEqual(actual, expected, message) {
    if (typeof actual === 'string') {
      actual = _htmlbarsSyntax.parse(actual);
    }
    if (typeof expected === 'string') {
      expected = _htmlbarsSyntax.parse(expected);
    }

    actual = normalizeNode(actual);
    expected = normalizeNode(expected);

    deepEqual(actual, expected, message);
  }
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXN5bnRheC10ZXN0cy9zdXBwb3J0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7VUFpQ2dCLFFBQVEsR0FBUixRQUFROztBQS9CeEIsV0FBUyxhQUFhLENBQUMsR0FBRyxFQUFFO0FBQzFCLFFBQUksR0FBRyxJQUFJLE9BQU8sR0FBRyxLQUFLLFFBQVEsRUFBRTtBQUNsQyxVQUFJLE1BQU0sQ0FBQztBQUNYLFVBQUksR0FBRyxDQUFDLE1BQU0sRUFBRTtBQUNkLGNBQU0sR0FBRyxJQUFJLEtBQUssQ0FBQyxHQUFHLENBQUMsTUFBTSxDQUFDLENBQUM7O0FBRS9CLGFBQUssSUFBSSxDQUFDLEdBQUcsQ0FBQyxFQUFFLENBQUMsR0FBRyxHQUFHLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQ25DLGdCQUFNLENBQUMsQ0FBQyxDQUFDLEdBQUcsYUFBYSxDQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1NBQ25DO09BQ0YsTUFBTTtBQUNMLGNBQU0sR0FBRyxFQUFFLENBQUM7O0FBRVosYUFBSyxJQUFJLEdBQUcsSUFBSSxHQUFHLEVBQUU7QUFDbkIsY0FBSSxHQUFHLENBQUMsY0FBYyxDQUFDLEdBQUcsQ0FBQyxFQUFFO0FBQzNCLGtCQUFNLENBQUMsR0FBRyxDQUFDLEdBQUcsYUFBYSxDQUFDLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQyxDQUFDO1dBQ3ZDO1NBQ0Y7O0FBRUQsWUFBSSxNQUFNLENBQUMsSUFBSSxFQUFFO0FBQ2YsZ0JBQU0sQ0FBQyxLQUFLLEdBQUcsTUFBTSxDQUFDLElBQUksQ0FBQztBQUMzQixpQkFBTyxNQUFNLENBQUMsSUFBSSxDQUFDO1NBQ3BCOztBQUVELGVBQU8sTUFBTSxDQUFDLEdBQUcsQ0FBQztPQUNuQjtBQUNELGFBQU8sTUFBTSxDQUFDO0tBQ2YsTUFBTTtBQUNMLGFBQU8sR0FBRyxDQUFDO0tBQ1o7R0FDRjs7QUFFTSxXQUFTLFFBQVEsQ0FBQyxNQUFNLEVBQUUsUUFBUSxFQUFFLE9BQU8sRUFBRTtBQUNsRCxRQUFJLE9BQU8sTUFBTSxLQUFLLFFBQVEsRUFBRTtBQUM5QixZQUFNLEdBQUcsZ0JBbkNKLEtBQUssQ0FtQ0ssTUFBTSxDQUFDLENBQUM7S0FDeEI7QUFDRCxRQUFJLE9BQU8sUUFBUSxLQUFLLFFBQVEsRUFBRTtBQUNoQyxjQUFRLEdBQUcsZ0JBdENOLEtBQUssQ0FzQ08sUUFBUSxDQUFDLENBQUM7S0FDNUI7O0FBRUQsVUFBTSxHQUFHLGFBQWEsQ0FBQyxNQUFNLENBQUMsQ0FBQztBQUMvQixZQUFRLEdBQUcsYUFBYSxDQUFDLFFBQVEsQ0FBQyxDQUFDOztBQUVuQyxhQUFTLENBQUMsTUFBTSxFQUFFLFFBQVEsRUFBRSxPQUFPLENBQUMsQ0FBQztHQUN0QyIsImZpbGUiOiJodG1sYmFycy1zeW50YXgtdGVzdHMvc3VwcG9ydC5qcyIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IHBhcnNlIH0gZnJvbSAnLi4vaHRtbGJhcnMtc3ludGF4JztcblxuZnVuY3Rpb24gbm9ybWFsaXplTm9kZShvYmopIHtcbiAgaWYgKG9iaiAmJiB0eXBlb2Ygb2JqID09PSAnb2JqZWN0Jykge1xuICAgIHZhciBuZXdPYmo7XG4gICAgaWYgKG9iai5zcGxpY2UpIHtcbiAgICAgIG5ld09iaiA9IG5ldyBBcnJheShvYmoubGVuZ3RoKTtcblxuICAgICAgZm9yICh2YXIgaSA9IDA7IGkgPCBvYmoubGVuZ3RoOyBpKyspIHtcbiAgICAgICAgbmV3T2JqW2ldID0gbm9ybWFsaXplTm9kZShvYmpbaV0pO1xuICAgICAgfVxuICAgIH0gZWxzZSB7XG4gICAgICBuZXdPYmogPSB7fTtcblxuICAgICAgZm9yICh2YXIga2V5IGluIG9iaikge1xuICAgICAgICBpZiAob2JqLmhhc093blByb3BlcnR5KGtleSkpIHtcbiAgICAgICAgICBuZXdPYmpba2V5XSA9IG5vcm1hbGl6ZU5vZGUob2JqW2tleV0pO1xuICAgICAgICB9XG4gICAgICB9XG5cbiAgICAgIGlmIChuZXdPYmoudHlwZSkge1xuICAgICAgICBuZXdPYmouX3R5cGUgPSBuZXdPYmoudHlwZTtcbiAgICAgICAgZGVsZXRlIG5ld09iai50eXBlO1xuICAgICAgfVxuXG4gICAgICBkZWxldGUgbmV3T2JqLmxvYztcbiAgICB9XG4gICAgcmV0dXJuIG5ld09iajtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gb2JqO1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBhc3RFcXVhbChhY3R1YWwsIGV4cGVjdGVkLCBtZXNzYWdlKSB7XG4gIGlmICh0eXBlb2YgYWN0dWFsID09PSAnc3RyaW5nJykge1xuICAgIGFjdHVhbCA9IHBhcnNlKGFjdHVhbCk7XG4gIH1cbiAgaWYgKHR5cGVvZiBleHBlY3RlZCA9PT0gJ3N0cmluZycpIHtcbiAgICBleHBlY3RlZCA9IHBhcnNlKGV4cGVjdGVkKTtcbiAgfVxuXG4gIGFjdHVhbCA9IG5vcm1hbGl6ZU5vZGUoYWN0dWFsKTtcbiAgZXhwZWN0ZWQgPSBub3JtYWxpemVOb2RlKGV4cGVjdGVkKTtcblxuICBkZWVwRXF1YWwoYWN0dWFsLCBleHBlY3RlZCwgbWVzc2FnZSk7XG59XG4iXX0=
define('htmlbars-syntax-tests/support.jshint', ['exports'], function (exports) {
  module('JSHint - htmlbars-syntax-tests');
  test('htmlbars-syntax-tests/support.js should pass jshint', function () {
    ok(true, 'htmlbars-syntax-tests/support.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXN5bnRheC10ZXN0cy9zdXBwb3J0LmpzaGludC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsUUFBTSxDQUFDLGdDQUFnQyxDQUFDLENBQUM7QUFDekMsTUFBSSxDQUFDLHFEQUFxRCxFQUFFLFlBQVc7QUFDckUsTUFBRSxDQUFDLElBQUksRUFBRSxzREFBc0QsQ0FBQyxDQUFDO0dBQ2xFLENBQUMsQ0FBQyIsImZpbGUiOiJodG1sYmFycy1zeW50YXgtdGVzdHMvc3VwcG9ydC5qc2hpbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUoJ0pTSGludCAtIGh0bWxiYXJzLXN5bnRheC10ZXN0cycpO1xudGVzdCgnaHRtbGJhcnMtc3ludGF4LXRlc3RzL3N1cHBvcnQuanMgc2hvdWxkIHBhc3MganNoaW50JywgZnVuY3Rpb24oKSB7IFxuICBvayh0cnVlLCAnaHRtbGJhcnMtc3ludGF4LXRlc3RzL3N1cHBvcnQuanMgc2hvdWxkIHBhc3MganNoaW50LicpOyBcbn0pO1xuIl19
define('htmlbars-syntax-tests/traversal/manipulating-node-test', ['exports', '../support', '../../htmlbars-syntax', '../../htmlbars-syntax/traversal/errors'], function (exports, _support, _htmlbarsSyntax, _htmlbarsSyntaxTraversalErrors) {

  QUnit.module('[htmlbars-syntax] Traversal - manipulating');

  ['enter', 'exit'].forEach(function (eventName) {
    QUnit.test('[' + eventName + '] Replacing self in a key (returning null)', function (assert) {
      var ast = _htmlbarsSyntax.parse('<x y={{z}} />');
      var attr = ast.body[0].attributes[0];

      assert.throws(function () {
        var _MustacheStatement;

        _htmlbarsSyntax.traverse(ast, {
          MustacheStatement: (_MustacheStatement = {}, _MustacheStatement[eventName] = function (node) {
            if (node.path.parts[0] === 'z') {
              return null;
            }
          }, _MustacheStatement)
        });
      }, _htmlbarsSyntaxTraversalErrors.cannotRemoveNode(attr.value, attr, 'value'));
    });

    QUnit.test('[' + eventName + '] Replacing self in a key (returning an empty array)', function (assert) {
      var ast = _htmlbarsSyntax.parse('<x y={{z}} />');
      var attr = ast.body[0].attributes[0];

      assert.throws(function () {
        var _MustacheStatement2;

        _htmlbarsSyntax.traverse(ast, {
          MustacheStatement: (_MustacheStatement2 = {}, _MustacheStatement2[eventName] = function (node) {
            if (node.path.parts[0] === 'z') {
              return [];
            }
          }, _MustacheStatement2)
        });
      }, _htmlbarsSyntaxTraversalErrors.cannotRemoveNode(attr.value, attr, 'value'));
    });

    QUnit.test('[' + eventName + '] Replacing self in a key (returning a node)', function () {
      var _MustacheStatement3;

      var ast = _htmlbarsSyntax.parse('<x y={{z}} />');

      _htmlbarsSyntax.traverse(ast, {
        MustacheStatement: (_MustacheStatement3 = {}, _MustacheStatement3[eventName] = function (node) {
          if (node.path.parts[0] === 'z') {
            return _htmlbarsSyntax.builders.mustache('a');
          }
        }, _MustacheStatement3)
      });

      _support.astEqual(ast, '<x y={{a}} />');
    });

    QUnit.test('[' + eventName + '] Replacing self in a key (returning an array with a single node)', function () {
      var _MustacheStatement4;

      var ast = _htmlbarsSyntax.parse('<x y={{z}} />');

      _htmlbarsSyntax.traverse(ast, {
        MustacheStatement: (_MustacheStatement4 = {}, _MustacheStatement4[eventName] = function (node) {
          if (node.path.parts[0] === 'z') {
            return [_htmlbarsSyntax.builders.mustache('a')];
          }
        }, _MustacheStatement4)
      });

      _support.astEqual(ast, '<x y={{a}} />');
    });

    QUnit.test('[' + eventName + '] Replacing self in a key (returning an array with multiple nodes)', function (assert) {
      var ast = _htmlbarsSyntax.parse('<x y={{z}} />');
      var attr = ast.body[0].attributes[0];

      assert.throws(function () {
        var _MustacheStatement5;

        _htmlbarsSyntax.traverse(ast, {
          MustacheStatement: (_MustacheStatement5 = {}, _MustacheStatement5[eventName] = function (node) {
            if (node.path.parts[0] === 'z') {
              return [_htmlbarsSyntax.builders.mustache('a'), _htmlbarsSyntax.builders.mustache('b'), _htmlbarsSyntax.builders.mustache('c')];
            }
          }, _MustacheStatement5)
        });
      }, _htmlbarsSyntaxTraversalErrors.cannotReplaceNode(attr.value, attr, 'value'));
    });

    QUnit.test('[' + eventName + '] Replacing self in an array (returning null)', function () {
      var _MustacheStatement6;

      var ast = _htmlbarsSyntax.parse('{{x}}{{y}}{{z}}');

      _htmlbarsSyntax.traverse(ast, {
        MustacheStatement: (_MustacheStatement6 = {}, _MustacheStatement6[eventName] = function (node) {
          if (node.path.parts[0] === 'y') {
            return null;
          }
        }, _MustacheStatement6)
      });

      _support.astEqual(ast, '{{x}}{{z}}');
    });

    QUnit.test('[' + eventName + '] Replacing self in an array (returning an empty array)', function () {
      var _MustacheStatement7;

      var ast = _htmlbarsSyntax.parse('{{x}}{{y}}{{z}}');

      _htmlbarsSyntax.traverse(ast, {
        MustacheStatement: (_MustacheStatement7 = {}, _MustacheStatement7[eventName] = function (node) {
          if (node.path.parts[0] === 'y') {
            return [];
          }
        }, _MustacheStatement7)
      });

      _support.astEqual(ast, '{{x}}{{z}}');
    });

    QUnit.test('[' + eventName + '] Replacing self in an array (returning a node)', function () {
      var _MustacheStatement8;

      var ast = _htmlbarsSyntax.parse('{{x}}{{y}}{{z}}');

      _htmlbarsSyntax.traverse(ast, {
        MustacheStatement: (_MustacheStatement8 = {}, _MustacheStatement8[eventName] = function (node) {
          if (node.path.parts[0] === 'y') {
            return _htmlbarsSyntax.builders.mustache('a');
          }
        }, _MustacheStatement8)
      });

      _support.astEqual(ast, '{{x}}{{a}}{{z}}');
    });

    QUnit.test('[' + eventName + '] Replacing self in an array (returning an array with a single node)', function () {
      var _MustacheStatement9;

      var ast = _htmlbarsSyntax.parse('{{x}}{{y}}{{z}}');

      _htmlbarsSyntax.traverse(ast, {
        MustacheStatement: (_MustacheStatement9 = {}, _MustacheStatement9[eventName] = function (node) {
          if (node.path.parts[0] === 'y') {
            return [_htmlbarsSyntax.builders.mustache('a')];
          }
        }, _MustacheStatement9)
      });

      _support.astEqual(ast, '{{x}}{{a}}{{z}}');
    });

    QUnit.test('[' + eventName + '] Replacing self in an array (returning an array with multiple nodes)', function () {
      var _MustacheStatement10;

      var ast = _htmlbarsSyntax.parse('{{x}}{{y}}{{z}}');

      _htmlbarsSyntax.traverse(ast, {
        MustacheStatement: (_MustacheStatement10 = {}, _MustacheStatement10[eventName] = function (node) {
          if (node.path.parts[0] === 'y') {
            return [_htmlbarsSyntax.builders.mustache('a'), _htmlbarsSyntax.builders.mustache('b'), _htmlbarsSyntax.builders.mustache('c')];
          }
        }, _MustacheStatement10)
      });

      _support.astEqual(ast, '{{x}}{{a}}{{b}}{{c}}{{z}}');
    });
  });

  QUnit.module('[htmlbars-syntax] Traversal - manipulating (edge cases)');

  QUnit.test('Inside of a block', function () {
    var ast = _htmlbarsSyntax.parse('{{y}}{{#w}}{{x}}{{y}}{{z}}{{/w}}');

    _htmlbarsSyntax.traverse(ast, {
      MustacheStatement: function (node) {
        if (node.path.parts[0] === 'y') {
          return [_htmlbarsSyntax.builders.mustache('a'), _htmlbarsSyntax.builders.mustache('b'), _htmlbarsSyntax.builders.mustache('c')];
        }
      }
    });

    _support.astEqual(ast, '{{a}}{{b}}{{c}}{{#w}}{{x}}{{a}}{{b}}{{c}}{{z}}{{/w}}');
  });

  QUnit.test('Exit event is not triggered if the node is replaced during the enter event', function (assert) {
    var ast = _htmlbarsSyntax.parse('{{x}}');
    var didExit = false;

    _htmlbarsSyntax.traverse(ast, {
      MustacheStatement: {
        enter: function () {
          return _htmlbarsSyntax.builders.mustache('y');
        },
        exit: function () {
          didExit = true;
        }
      }
    });

    assert.strictEqual(didExit, false);
  });
});
//# sourceMappingURL=data:application/json;base64,
define('htmlbars-syntax-tests/traversal/manipulating-node-test.jshint', ['exports'], function (exports) {
  module('JSHint - htmlbars-syntax-tests/traversal');
  test('htmlbars-syntax-tests/traversal/manipulating-node-test.js should pass jshint', function () {
    ok(true, 'htmlbars-syntax-tests/traversal/manipulating-node-test.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXN5bnRheC10ZXN0cy90cmF2ZXJzYWwvbWFuaXB1bGF0aW5nLW5vZGUtdGVzdC5qc2hpbnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLFFBQU0sQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDO0FBQ25ELE1BQUksQ0FBQyw4RUFBOEUsRUFBRSxZQUFXO0FBQzlGLE1BQUUsQ0FBQyxJQUFJLEVBQUUsK0VBQStFLENBQUMsQ0FBQztHQUMzRixDQUFDLENBQUMiLCJmaWxlIjoiaHRtbGJhcnMtc3ludGF4LXRlc3RzL3RyYXZlcnNhbC9tYW5pcHVsYXRpbmctbm9kZS10ZXN0LmpzaGludC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZSgnSlNIaW50IC0gaHRtbGJhcnMtc3ludGF4LXRlc3RzL3RyYXZlcnNhbCcpO1xudGVzdCgnaHRtbGJhcnMtc3ludGF4LXRlc3RzL3RyYXZlcnNhbC9tYW5pcHVsYXRpbmctbm9kZS10ZXN0LmpzIHNob3VsZCBwYXNzIGpzaGludCcsIGZ1bmN0aW9uKCkgeyBcbiAgb2sodHJ1ZSwgJ2h0bWxiYXJzLXN5bnRheC10ZXN0cy90cmF2ZXJzYWwvbWFuaXB1bGF0aW5nLW5vZGUtdGVzdC5qcyBzaG91bGQgcGFzcyBqc2hpbnQuJyk7IFxufSk7XG4iXX0=
define('htmlbars-syntax-tests/traversal/visiting-keys-node-test', ['exports', '../../htmlbars-syntax'], function (exports, _htmlbarsSyntax) {

  function traversalEqual(node, expectedTraversal) {
    var actualTraversal = [];

    _htmlbarsSyntax.traverse(node, {
      All: {
        enter: function (node) {
          actualTraversal.push(['enter', node]);
        },
        exit: function (node) {
          actualTraversal.push(['exit', node]);
        },
        keys: {
          All: {
            enter: function (node, key) {
              actualTraversal.push(['enter:' + key, node]);
            },
            exit: function (node, key) {
              actualTraversal.push(['exit:' + key, node]);
            }
          }
        }
      }
    });

    deepEqual(actualTraversal.map(function (a) {
      return a[0] + ' ' + a[1].type;
    }), expectedTraversal.map(function (a) {
      return a[0] + ' ' + a[1].type;
    }));

    var nodesEqual = true;

    for (var i = 0; i < actualTraversal.length; i++) {
      if (actualTraversal[i][1] !== expectedTraversal[i][1]) {
        nodesEqual = false;
        break;
      }
    }

    ok(nodesEqual, "Actual nodes match expected nodes");
  }

  QUnit.module('[htmlbars-syntax] Traversal - visiting keys');

  test('Blocks', function () {
    var ast = _htmlbarsSyntax.parse('{{#block param1 param2 key1=value key2=value}}<b></b><b></b>{{/block}}');

    traversalEqual(ast, [['enter', ast], ['enter:body', ast], ['enter', ast.body[0]], ['enter:path', ast.body[0]], ['enter', ast.body[0].path], ['exit', ast.body[0].path], ['exit:path', ast.body[0]], ['enter:params', ast.body[0]], ['enter', ast.body[0].params[0]], ['exit', ast.body[0].params[0]], ['enter', ast.body[0].params[1]], ['exit', ast.body[0].params[1]], ['exit:params', ast.body[0]], ['enter:hash', ast.body[0]], ['enter', ast.body[0].hash], ['enter:pairs', ast.body[0].hash], ['enter', ast.body[0].hash.pairs[0]], ['enter:value', ast.body[0].hash.pairs[0]], ['enter', ast.body[0].hash.pairs[0].value], ['exit', ast.body[0].hash.pairs[0].value], ['exit:value', ast.body[0].hash.pairs[0]], ['exit', ast.body[0].hash.pairs[0]], ['enter', ast.body[0].hash.pairs[1]], ['enter:value', ast.body[0].hash.pairs[1]], ['enter', ast.body[0].hash.pairs[1].value], ['exit', ast.body[0].hash.pairs[1].value], ['exit:value', ast.body[0].hash.pairs[1]], ['exit', ast.body[0].hash.pairs[1]], ['exit:pairs', ast.body[0].hash], ['exit', ast.body[0].hash], ['exit:hash', ast.body[0]], ['enter:program', ast.body[0]], ['enter', ast.body[0].program], ['enter:body', ast.body[0].program], ['enter', ast.body[0].program.body[0]], ['enter:attributes', ast.body[0].program.body[0]], ['exit:attributes', ast.body[0].program.body[0]], ['enter:modifiers', ast.body[0].program.body[0]], ['exit:modifiers', ast.body[0].program.body[0]], ['enter:children', ast.body[0].program.body[0]], ['exit:children', ast.body[0].program.body[0]], ['exit', ast.body[0].program.body[0]], ['enter', ast.body[0].program.body[1]], ['enter:attributes', ast.body[0].program.body[1]], ['exit:attributes', ast.body[0].program.body[1]], ['enter:modifiers', ast.body[0].program.body[1]], ['exit:modifiers', ast.body[0].program.body[1]], ['enter:children', ast.body[0].program.body[1]], ['exit:children', ast.body[0].program.body[1]], ['exit', ast.body[0].program.body[1]], ['exit:body', ast.body[0].program], ['exit', ast.body[0].program], ['exit:program', ast.body[0]], ['exit', ast.body[0]], ['exit:body', ast], ['exit', ast]]);
  });
});
//# sourceMappingURL=data:application/json;base64,
define('htmlbars-syntax-tests/traversal/visiting-keys-node-test.jshint', ['exports'], function (exports) {
  module('JSHint - htmlbars-syntax-tests/traversal');
  test('htmlbars-syntax-tests/traversal/visiting-keys-node-test.js should pass jshint', function () {
    ok(true, 'htmlbars-syntax-tests/traversal/visiting-keys-node-test.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXN5bnRheC10ZXN0cy90cmF2ZXJzYWwvdmlzaXRpbmcta2V5cy1ub2RlLXRlc3QuanNoaW50LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7QUFBQSxRQUFNLENBQUMsMENBQTBDLENBQUMsQ0FBQztBQUNuRCxNQUFJLENBQUMsK0VBQStFLEVBQUUsWUFBVztBQUMvRixNQUFFLENBQUMsSUFBSSxFQUFFLGdGQUFnRixDQUFDLENBQUM7R0FDNUYsQ0FBQyxDQUFDIiwiZmlsZSI6Imh0bWxiYXJzLXN5bnRheC10ZXN0cy90cmF2ZXJzYWwvdmlzaXRpbmcta2V5cy1ub2RlLXRlc3QuanNoaW50LmpzIiwic291cmNlc0NvbnRlbnQiOlsibW9kdWxlKCdKU0hpbnQgLSBodG1sYmFycy1zeW50YXgtdGVzdHMvdHJhdmVyc2FsJyk7XG50ZXN0KCdodG1sYmFycy1zeW50YXgtdGVzdHMvdHJhdmVyc2FsL3Zpc2l0aW5nLWtleXMtbm9kZS10ZXN0LmpzIHNob3VsZCBwYXNzIGpzaGludCcsIGZ1bmN0aW9uKCkgeyBcbiAgb2sodHJ1ZSwgJ2h0bWxiYXJzLXN5bnRheC10ZXN0cy90cmF2ZXJzYWwvdmlzaXRpbmcta2V5cy1ub2RlLXRlc3QuanMgc2hvdWxkIHBhc3MganNoaW50LicpOyBcbn0pO1xuIl19
define('htmlbars-syntax-tests/traversal/visiting-node-test', ['exports', '../../htmlbars-syntax'], function (exports, _htmlbarsSyntax) {

  function traversalEqual(node, expectedTraversal) {
    var actualTraversal = [];

    _htmlbarsSyntax.traverse(node, {
      All: {
        enter: function (node) {
          actualTraversal.push(['enter', node]);
        },
        exit: function (node) {
          actualTraversal.push(['exit', node]);
        }
      }
    });

    deepEqual(actualTraversal.map(function (a) {
      return a[0] + ' ' + a[1].type;
    }), expectedTraversal.map(function (a) {
      return a[0] + ' ' + a[1].type;
    }));

    var nodesEqual = true;

    for (var i = 0; i < actualTraversal.length; i++) {
      if (actualTraversal[i][1] !== expectedTraversal[i][1]) {
        nodesEqual = false;
        break;
      }
    }

    ok(nodesEqual, "Actual nodes match expected nodes");
  }

  QUnit.module('[htmlbars-syntax] Traversal - visiting');

  test('Elements and attributes', function () {
    var ast = _htmlbarsSyntax.parse('<div id="id" class="large {{classes}}" value={{value}}><b></b><b></b></div>');

    traversalEqual(ast, [['enter', ast], ['enter', ast.body[0]], ['enter', ast.body[0].attributes[0]], ['enter', ast.body[0].attributes[0].value], ['exit', ast.body[0].attributes[0].value], ['exit', ast.body[0].attributes[0]], ['enter', ast.body[0].attributes[1]], ['enter', ast.body[0].attributes[1].value], ['enter', ast.body[0].attributes[1].value.parts[0]], ['exit', ast.body[0].attributes[1].value.parts[0]], ['enter', ast.body[0].attributes[1].value.parts[1]], ['exit', ast.body[0].attributes[1].value.parts[1]], ['exit', ast.body[0].attributes[1].value], ['exit', ast.body[0].attributes[1]], ['enter', ast.body[0].attributes[2]], ['enter', ast.body[0].attributes[2].value], ['enter', ast.body[0].attributes[2].value.path], ['exit', ast.body[0].attributes[2].value.path], ['enter', ast.body[0].attributes[2].value.hash], ['exit', ast.body[0].attributes[2].value.hash], ['exit', ast.body[0].attributes[2].value], ['exit', ast.body[0].attributes[2]], ['enter', ast.body[0].children[0]], ['exit', ast.body[0].children[0]], ['enter', ast.body[0].children[1]], ['exit', ast.body[0].children[1]], ['exit', ast.body[0]], ['exit', ast]]);
  });

  test('Element modifiers', function () {
    var ast = _htmlbarsSyntax.parse('<div {{modifier}}{{modifier param1 param2 key1=value key2=value}}></div>');

    traversalEqual(ast, [['enter', ast], ['enter', ast.body[0]], ['enter', ast.body[0].modifiers[0]], ['enter', ast.body[0].modifiers[0].path], ['exit', ast.body[0].modifiers[0].path], ['enter', ast.body[0].modifiers[0].hash], ['exit', ast.body[0].modifiers[0].hash], ['exit', ast.body[0].modifiers[0]], ['enter', ast.body[0].modifiers[1]], ['enter', ast.body[0].modifiers[1].path], ['exit', ast.body[0].modifiers[1].path], ['enter', ast.body[0].modifiers[1].params[0]], ['exit', ast.body[0].modifiers[1].params[0]], ['enter', ast.body[0].modifiers[1].params[1]], ['exit', ast.body[0].modifiers[1].params[1]], ['enter', ast.body[0].modifiers[1].hash], ['enter', ast.body[0].modifiers[1].hash.pairs[0]], ['enter', ast.body[0].modifiers[1].hash.pairs[0].value], ['exit', ast.body[0].modifiers[1].hash.pairs[0].value], ['exit', ast.body[0].modifiers[1].hash.pairs[0]], ['enter', ast.body[0].modifiers[1].hash.pairs[1]], ['enter', ast.body[0].modifiers[1].hash.pairs[1].value], ['exit', ast.body[0].modifiers[1].hash.pairs[1].value], ['exit', ast.body[0].modifiers[1].hash.pairs[1]], ['exit', ast.body[0].modifiers[1].hash], ['exit', ast.body[0].modifiers[1]], ['exit', ast.body[0]], ['exit', ast]]);
  });

  test('Blocks', function () {
    var ast = _htmlbarsSyntax.parse('{{#block}}{{/block}}' + '{{#block param1 param2 key1=value key2=value}}<b></b><b></b>{{/block}}');

    traversalEqual(ast, [['enter', ast], ['enter', ast.body[0]], ['enter', ast.body[0].path], ['exit', ast.body[0].path], ['enter', ast.body[0].hash], ['exit', ast.body[0].hash], ['enter', ast.body[0].program], ['exit', ast.body[0].program], ['exit', ast.body[0]], ['enter', ast.body[1]], ['enter', ast.body[1].path], ['exit', ast.body[1].path], ['enter', ast.body[1].params[0]], ['exit', ast.body[1].params[0]], ['enter', ast.body[1].params[1]], ['exit', ast.body[1].params[1]], ['enter', ast.body[1].hash], ['enter', ast.body[1].hash.pairs[0]], ['enter', ast.body[1].hash.pairs[0].value], ['exit', ast.body[1].hash.pairs[0].value], ['exit', ast.body[1].hash.pairs[0]], ['enter', ast.body[1].hash.pairs[1]], ['enter', ast.body[1].hash.pairs[1].value], ['exit', ast.body[1].hash.pairs[1].value], ['exit', ast.body[1].hash.pairs[1]], ['exit', ast.body[1].hash], ['enter', ast.body[1].program], ['enter', ast.body[1].program.body[0]], ['exit', ast.body[1].program.body[0]], ['enter', ast.body[1].program.body[1]], ['exit', ast.body[1].program.body[1]], ['exit', ast.body[1].program], ['exit', ast.body[1]], ['exit', ast]]);
  });

  test('Mustaches', function () {
    var ast = _htmlbarsSyntax.parse('{{mustache}}' + '{{mustache param1 param2 key1=value key2=value}}');

    traversalEqual(ast, [['enter', ast], ['enter', ast.body[0]], ['enter', ast.body[0].path], ['exit', ast.body[0].path], ['enter', ast.body[0].hash], ['exit', ast.body[0].hash], ['exit', ast.body[0]], ['enter', ast.body[1]], ['enter', ast.body[1].path], ['exit', ast.body[1].path], ['enter', ast.body[1].params[0]], ['exit', ast.body[1].params[0]], ['enter', ast.body[1].params[1]], ['exit', ast.body[1].params[1]], ['enter', ast.body[1].hash], ['enter', ast.body[1].hash.pairs[0]], ['enter', ast.body[1].hash.pairs[0].value], ['exit', ast.body[1].hash.pairs[0].value], ['exit', ast.body[1].hash.pairs[0]], ['enter', ast.body[1].hash.pairs[1]], ['enter', ast.body[1].hash.pairs[1].value], ['exit', ast.body[1].hash.pairs[1].value], ['exit', ast.body[1].hash.pairs[1]], ['exit', ast.body[1].hash], ['exit', ast.body[1]], ['exit', ast]]);
  });

  test('Components', function () {
    var ast = _htmlbarsSyntax.parse('<x-block />' + '<x-block></x-block>' + '<x-block id="id" class="large {{classes}}" value={{value}}><b></b><b></b></x-block>');

    traversalEqual(ast, [['enter', ast], ['enter', ast.body[0]], ['enter', ast.body[0].program], ['exit', ast.body[0].program], ['exit', ast.body[0]], ['enter', ast.body[1]], ['enter', ast.body[1].program], ['exit', ast.body[1].program], ['exit', ast.body[1]], ['enter', ast.body[2]], ['enter', ast.body[2].attributes[0]], ['enter', ast.body[2].attributes[0].value], ['exit', ast.body[2].attributes[0].value], ['exit', ast.body[2].attributes[0]], ['enter', ast.body[2].attributes[1]], ['enter', ast.body[2].attributes[1].value], ['enter', ast.body[2].attributes[1].value.parts[0]], ['exit', ast.body[2].attributes[1].value.parts[0]], ['enter', ast.body[2].attributes[1].value.parts[1]], ['exit', ast.body[2].attributes[1].value.parts[1]], ['exit', ast.body[2].attributes[1].value], ['exit', ast.body[2].attributes[1]], ['enter', ast.body[2].attributes[2]], ['enter', ast.body[2].attributes[2].value], ['enter', ast.body[2].attributes[2].value.path], ['exit', ast.body[2].attributes[2].value.path], ['enter', ast.body[2].attributes[2].value.hash], ['exit', ast.body[2].attributes[2].value.hash], ['exit', ast.body[2].attributes[2].value], ['exit', ast.body[2].attributes[2]], ['enter', ast.body[2].program], ['enter', ast.body[2].program.body[0]], ['exit', ast.body[2].program.body[0]], ['enter', ast.body[2].program.body[1]], ['exit', ast.body[2].program.body[1]], ['exit', ast.body[2].program], ['exit', ast.body[2]], ['exit', ast]]);
  });

  test('Nested helpers', function () {
    var ast = _htmlbarsSyntax.parse('{{helper\n    (helper param1 param2 key1=value key2=value)\n    key1=(helper param)\n    key2=(helper key=(helper param))\n  }}');

    traversalEqual(ast, [['enter', ast], ['enter', ast.body[0]], ['enter', ast.body[0].path], ['exit', ast.body[0].path], ['enter', ast.body[0].params[0]], ['enter', ast.body[0].params[0].path], ['exit', ast.body[0].params[0].path], ['enter', ast.body[0].params[0].params[0]], ['exit', ast.body[0].params[0].params[0]], ['enter', ast.body[0].params[0].params[1]], ['exit', ast.body[0].params[0].params[1]], ['enter', ast.body[0].params[0].hash], ['enter', ast.body[0].params[0].hash.pairs[0]], ['enter', ast.body[0].params[0].hash.pairs[0].value], ['exit', ast.body[0].params[0].hash.pairs[0].value], ['exit', ast.body[0].params[0].hash.pairs[0]], ['enter', ast.body[0].params[0].hash.pairs[1]], ['enter', ast.body[0].params[0].hash.pairs[1].value], ['exit', ast.body[0].params[0].hash.pairs[1].value], ['exit', ast.body[0].params[0].hash.pairs[1]], ['exit', ast.body[0].params[0].hash], ['exit', ast.body[0].params[0]], ['enter', ast.body[0].hash], ['enter', ast.body[0].hash.pairs[0]], ['enter', ast.body[0].hash.pairs[0].value], ['enter', ast.body[0].hash.pairs[0].value.path], ['exit', ast.body[0].hash.pairs[0].value.path], ['enter', ast.body[0].hash.pairs[0].value.params[0]], ['exit', ast.body[0].hash.pairs[0].value.params[0]], ['enter', ast.body[0].hash.pairs[0].value.hash], ['exit', ast.body[0].hash.pairs[0].value.hash], ['exit', ast.body[0].hash.pairs[0].value], ['exit', ast.body[0].hash.pairs[0]], ['enter', ast.body[0].hash.pairs[1]], ['enter', ast.body[0].hash.pairs[1].value], ['enter', ast.body[0].hash.pairs[1].value.path], ['exit', ast.body[0].hash.pairs[1].value.path], ['enter', ast.body[0].hash.pairs[1].value.hash], ['enter', ast.body[0].hash.pairs[1].value.hash.pairs[0]], ['enter', ast.body[0].hash.pairs[1].value.hash.pairs[0].value], ['enter', ast.body[0].hash.pairs[1].value.hash.pairs[0].value.path], ['exit', ast.body[0].hash.pairs[1].value.hash.pairs[0].value.path], ['enter', ast.body[0].hash.pairs[1].value.hash.pairs[0].value.params[0]], ['exit', ast.body[0].hash.pairs[1].value.hash.pairs[0].value.params[0]], ['enter', ast.body[0].hash.pairs[1].value.hash.pairs[0].value.hash], ['exit', ast.body[0].hash.pairs[1].value.hash.pairs[0].value.hash], ['exit', ast.body[0].hash.pairs[1].value.hash.pairs[0].value], ['exit', ast.body[0].hash.pairs[1].value.hash.pairs[0]], ['exit', ast.body[0].hash.pairs[1].value.hash], ['exit', ast.body[0].hash.pairs[1].value], ['exit', ast.body[0].hash.pairs[1]], ['exit', ast.body[0].hash], ['exit', ast.body[0]], ['exit', ast]]);
  });

  test('Comments', function () {
    var ast = _htmlbarsSyntax.parse('<!-- HTML comment -->{{!-- Handlebars comment --}}');

    traversalEqual(ast, [['enter', ast], ['enter', ast.body[0]], ['exit', ast.body[0]],
    // TODO: Ensure Handlebars comments are in the AST.
    // ['enter', ast.body[1]],
    // ['exit',  ast.body[1]],
    ['exit', ast]]);
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXN5bnRheC10ZXN0cy90cmF2ZXJzYWwvdmlzaXRpbmctbm9kZS10ZXN0LmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7O0FBRUEsV0FBUyxjQUFjLENBQUMsSUFBSSxFQUFFLGlCQUFpQixFQUFFO0FBQy9DLFFBQUksZUFBZSxHQUFHLEVBQUUsQ0FBQzs7QUFFekIsb0JBTGMsUUFBUSxDQUtiLElBQUksRUFBRTtBQUNiLFNBQUcsRUFBRTtBQUNILGFBQUssRUFBQSxVQUFDLElBQUksRUFBRTtBQUFFLHlCQUFlLENBQUMsSUFBSSxDQUFDLENBQUMsT0FBTyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUM7U0FBRTtBQUN0RCxZQUFJLEVBQUEsVUFBQyxJQUFJLEVBQUU7QUFBRSx5QkFBZSxDQUFDLElBQUksQ0FBQyxDQUFDLE1BQU0sRUFBRyxJQUFJLENBQUMsQ0FBQyxDQUFDO1NBQUU7T0FDdEQ7S0FDRixDQUFDLENBQUM7O0FBRUgsYUFBUyxDQUNQLGVBQWUsQ0FBQyxHQUFHLENBQUMsVUFBQSxDQUFDO2FBQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJO0tBQUUsQ0FBQyxFQUNoRCxpQkFBaUIsQ0FBQyxHQUFHLENBQUMsVUFBQSxDQUFDO2FBQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJO0tBQUUsQ0FBQyxDQUNuRCxDQUFDOztBQUVGLFFBQUksVUFBVSxHQUFHLElBQUksQ0FBQzs7QUFFdEIsU0FBSyxJQUFJLENBQUMsR0FBRyxDQUFDLEVBQUUsQ0FBQyxHQUFHLGVBQWUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDL0MsVUFBSSxlQUFlLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssaUJBQWlCLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQUU7QUFDckQsa0JBQVUsR0FBRyxLQUFLLENBQUM7QUFDbkIsY0FBTTtPQUNQO0tBQ0Y7O0FBRUQsTUFBRSxDQUFDLFVBQVUsRUFBRSxtQ0FBbUMsQ0FBQyxDQUFDO0dBQ3JEOztBQUVELE9BQUssQ0FBQyxNQUFNLENBQUMsd0NBQXdDLENBQUMsQ0FBQzs7QUFFdkQsTUFBSSxDQUFDLHlCQUF5QixFQUFFLFlBQVc7QUFDekMsUUFBSSxHQUFHLEdBQUcsZ0JBaENILEtBQUssK0VBZ0NrRixDQUFDOztBQUUvRixrQkFBYyxDQUFDLEdBQUcsRUFBRSxDQUNsQixDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsRUFDZCxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ3RCLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ3BDLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUMxQyxDQUFDLE1BQU0sRUFBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFDMUMsQ0FBQyxNQUFNLEVBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDcEMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDcEMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQzFDLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDbkQsQ0FBQyxNQUFNLEVBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNuRCxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ25ELENBQUMsTUFBTSxFQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDbkQsQ0FBQyxNQUFNLEVBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQzFDLENBQUMsTUFBTSxFQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ3BDLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ3BDLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUMxQyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQy9DLENBQUMsTUFBTSxFQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFDL0MsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUMvQyxDQUFDLE1BQU0sRUFBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQy9DLENBQUMsTUFBTSxFQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUMxQyxDQUFDLE1BQU0sRUFBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNwQyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNsQyxDQUFDLE1BQU0sRUFBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNsQyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNsQyxDQUFDLE1BQU0sRUFBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNsQyxDQUFDLE1BQU0sRUFBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ3RCLENBQUMsTUFBTSxFQUFHLEdBQUcsQ0FBQyxDQUNmLENBQUMsQ0FBQztHQUNKLENBQUMsQ0FBQzs7QUFFSCxNQUFJLENBQUMsbUJBQW1CLEVBQUUsWUFBVztBQUNuQyxRQUFJLEdBQUcsR0FBRyxnQkFuRUgsS0FBSyw0RUFtRStFLENBQUM7O0FBRTVGLGtCQUFjLENBQUMsR0FBRyxFQUFFLENBQ2xCLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxFQUNkLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDdEIsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDbkMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQ3hDLENBQUMsTUFBTSxFQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUN4QyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFDeEMsQ0FBQyxNQUFNLEVBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQ3hDLENBQUMsTUFBTSxFQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ25DLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ25DLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUN4QyxDQUFDLE1BQU0sRUFBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFDeEMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQzdDLENBQUMsTUFBTSxFQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUM3QyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDN0MsQ0FBQyxNQUFNLEVBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQzdDLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUN4QyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ2pELENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQ3ZELENBQUMsTUFBTSxFQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQ3ZELENBQUMsTUFBTSxFQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDakQsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxTQUFTLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNqRCxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUN2RCxDQUFDLE1BQU0sRUFBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUN2RCxDQUFDLE1BQU0sRUFBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ2pELENBQUMsTUFBTSxFQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUN4QyxDQUFDLE1BQU0sRUFBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNuQyxDQUFDLE1BQU0sRUFBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ3RCLENBQUMsTUFBTSxFQUFHLEdBQUcsQ0FBQyxDQUNmLENBQUMsQ0FBQztHQUNKLENBQUMsQ0FBQzs7QUFFSCxNQUFJLENBQUMsUUFBUSxFQUFFLFlBQVc7QUFDeEIsUUFBSSxHQUFHLEdBQUcsZ0JBdEdILEtBQUssQ0F1R1YsaUdBQ3dFLENBQ3pFLENBQUM7O0FBRUYsa0JBQWMsQ0FBQyxHQUFHLEVBQUUsQ0FDbEIsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLEVBQ2QsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUN0QixDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUMzQixDQUFDLE1BQU0sRUFBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUMzQixDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUMzQixDQUFDLE1BQU0sRUFBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUMzQixDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUM5QixDQUFDLE1BQU0sRUFBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxFQUM5QixDQUFDLE1BQU0sRUFBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ3RCLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDdEIsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFDM0IsQ0FBQyxNQUFNLEVBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFDM0IsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDaEMsQ0FBQyxNQUFNLEVBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDaEMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDaEMsQ0FBQyxNQUFNLEVBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDaEMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFDM0IsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ3BDLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFDMUMsQ0FBQyxNQUFNLEVBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUMxQyxDQUFDLE1BQU0sRUFBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDcEMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ3BDLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFDMUMsQ0FBQyxNQUFNLEVBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUMxQyxDQUFDLE1BQU0sRUFBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDcEMsQ0FBQyxNQUFNLEVBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFDM0IsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFDOUIsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ3RDLENBQUMsTUFBTSxFQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUN0QyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDdEMsQ0FBQyxNQUFNLEVBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ3RDLENBQUMsTUFBTSxFQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQzlCLENBQUMsTUFBTSxFQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDdEIsQ0FBQyxNQUFNLEVBQUcsR0FBRyxDQUFDLENBQ2YsQ0FBQyxDQUFDO0dBQ0osQ0FBQyxDQUFDOztBQUVILE1BQUksQ0FBQyxXQUFXLEVBQUUsWUFBVztBQUMzQixRQUFJLEdBQUcsR0FBRyxnQkFsSkgsS0FBSyxDQW1KVixtRUFDa0QsQ0FDbkQsQ0FBQzs7QUFFRixrQkFBYyxDQUFDLEdBQUcsRUFBRSxDQUNsQixDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsRUFDZCxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ3RCLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQzNCLENBQUMsTUFBTSxFQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQzNCLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQzNCLENBQUMsTUFBTSxFQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQzNCLENBQUMsTUFBTSxFQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDdEIsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUN0QixDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUMzQixDQUFDLE1BQU0sRUFBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUMzQixDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNoQyxDQUFDLE1BQU0sRUFBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNoQyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNoQyxDQUFDLE1BQU0sRUFBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNoQyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUMzQixDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDcEMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUMxQyxDQUFDLE1BQU0sRUFBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQzFDLENBQUMsTUFBTSxFQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNwQyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDcEMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUMxQyxDQUFDLE1BQU0sRUFBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQzFDLENBQUMsTUFBTSxFQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNwQyxDQUFDLE1BQU0sRUFBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUMzQixDQUFDLE1BQU0sRUFBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ3RCLENBQUMsTUFBTSxFQUFHLEdBQUcsQ0FBQyxDQUNmLENBQUMsQ0FBQztHQUNKLENBQUMsQ0FBQzs7QUFFSCxNQUFJLENBQUMsWUFBWSxFQUFFLFlBQVc7QUFDNUIsUUFBSSxHQUFHLEdBQUcsZ0JBdExILEtBQUssQ0F1TFYscUNBQ3FCLHdGQUNnRSxDQUN0RixDQUFDOztBQUVGLGtCQUFjLENBQUMsR0FBRyxFQUFFLENBQ2xCLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxFQUNkLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDdEIsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFDOUIsQ0FBQyxNQUFNLEVBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFDOUIsQ0FBQyxNQUFNLEVBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUN0QixDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ3RCLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQzlCLENBQUMsTUFBTSxFQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQzlCLENBQUMsTUFBTSxFQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDdEIsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUN0QixDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNwQyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFDMUMsQ0FBQyxNQUFNLEVBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQzFDLENBQUMsTUFBTSxFQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ3BDLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ3BDLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUMxQyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ25ELENBQUMsTUFBTSxFQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDbkQsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNuRCxDQUFDLE1BQU0sRUFBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ25ELENBQUMsTUFBTSxFQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxFQUMxQyxDQUFDLE1BQU0sRUFBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNwQyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNwQyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFDMUMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUMvQyxDQUFDLE1BQU0sRUFBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQy9DLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsRUFDL0MsQ0FBQyxNQUFNLEVBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxFQUMvQyxDQUFDLE1BQU0sRUFBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFDMUMsQ0FBQyxNQUFNLEVBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxVQUFVLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDcEMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFDOUIsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ3RDLENBQUMsTUFBTSxFQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUN0QyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDdEMsQ0FBQyxNQUFNLEVBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ3RDLENBQUMsTUFBTSxFQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLEVBQzlCLENBQUMsTUFBTSxFQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDdEIsQ0FBQyxNQUFNLEVBQUcsR0FBRyxDQUFDLENBQ2YsQ0FBQyxDQUFDO0dBQ0osQ0FBQyxDQUFDOztBQUVILE1BQUksQ0FBQyxnQkFBZ0IsRUFBRSxZQUFXO0FBQ2hDLFFBQUksR0FBRyxHQUFHLGdCQXZPSCxLQUFLLG1JQTJPUixDQUFDOztBQUVMLGtCQUFjLENBQUMsR0FBRyxFQUFFLENBQ2xCLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxFQUNkLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDdEIsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFDM0IsQ0FBQyxNQUFNLEVBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsRUFDM0IsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDaEMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQ3JDLENBQUMsTUFBTSxFQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUNyQyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDMUMsQ0FBQyxNQUFNLEVBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQzFDLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUMxQyxDQUFDLE1BQU0sRUFBRyxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDMUMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQ3JDLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDOUMsQ0FBQyxPQUFPLEVBQUUsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFDcEQsQ0FBQyxNQUFNLEVBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFDcEQsQ0FBQyxNQUFNLEVBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUM5QyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQzlDLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQ3BELENBQUMsTUFBTSxFQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQ3BELENBQUMsTUFBTSxFQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDOUMsQ0FBQyxNQUFNLEVBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQ3JDLENBQUMsTUFBTSxFQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ2hDLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQzNCLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNwQyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQzFDLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQy9DLENBQUMsTUFBTSxFQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQy9DLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ3BELENBQUMsTUFBTSxFQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ3BELENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQy9DLENBQUMsTUFBTSxFQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQy9DLENBQUMsTUFBTSxFQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFDMUMsQ0FBQyxNQUFNLEVBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ3BDLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUNwQyxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQzFDLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQy9DLENBQUMsTUFBTSxFQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQy9DLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQy9DLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxFQUN4RCxDQUFDLE9BQU8sRUFBRSxHQUFHLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUMsS0FBSyxDQUFDLEVBQzlELENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQ25FLENBQUMsTUFBTSxFQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQ25FLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ3hFLENBQUMsTUFBTSxFQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsTUFBTSxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ3hFLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQ25FLENBQUMsTUFBTSxFQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQ25FLENBQUMsTUFBTSxFQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFDOUQsQ0FBQyxNQUFNLEVBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEtBQUssQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ3hELENBQUMsTUFBTSxFQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLEVBQy9DLENBQUMsTUFBTSxFQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxLQUFLLENBQUMsRUFDMUMsQ0FBQyxNQUFNLEVBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLEVBQ3BDLENBQUMsTUFBTSxFQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLEVBQzNCLENBQUMsTUFBTSxFQUFHLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDdEIsQ0FBQyxNQUFNLEVBQUcsR0FBRyxDQUFDLENBQ2YsQ0FBQyxDQUFDO0dBQ0osQ0FBQyxDQUFDOztBQUVILE1BQUksQ0FBQyxVQUFVLEVBQUUsWUFBVztBQUMxQixRQUFJLEdBQUcsR0FBRyxnQkF4U0gsS0FBSyxzREF3U3lELENBQUM7O0FBRXRFLGtCQUFjLENBQUMsR0FBRyxFQUFFLENBQ2xCLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxFQUNkLENBQUMsT0FBTyxFQUFFLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLENBQUMsRUFDdEIsQ0FBQyxNQUFNLEVBQUcsR0FBRyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQzs7OztBQUl0QixLQUFDLE1BQU0sRUFBRyxHQUFHLENBQUMsQ0FDZixDQUFDLENBQUM7R0FDSixDQUFDLENBQUMiLCJmaWxlIjoiaHRtbGJhcnMtc3ludGF4LXRlc3RzL3RyYXZlcnNhbC92aXNpdGluZy1ub2RlLXRlc3QuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBwYXJzZSwgdHJhdmVyc2UgfSBmcm9tICcuLi8uLi9odG1sYmFycy1zeW50YXgnO1xuXG5mdW5jdGlvbiB0cmF2ZXJzYWxFcXVhbChub2RlLCBleHBlY3RlZFRyYXZlcnNhbCkge1xuICBsZXQgYWN0dWFsVHJhdmVyc2FsID0gW107XG5cbiAgdHJhdmVyc2Uobm9kZSwge1xuICAgIEFsbDoge1xuICAgICAgZW50ZXIobm9kZSkgeyBhY3R1YWxUcmF2ZXJzYWwucHVzaChbJ2VudGVyJywgbm9kZV0pOyB9LFxuICAgICAgZXhpdChub2RlKSB7IGFjdHVhbFRyYXZlcnNhbC5wdXNoKFsnZXhpdCcsICBub2RlXSk7IH1cbiAgICB9XG4gIH0pO1xuXG4gIGRlZXBFcXVhbChcbiAgICBhY3R1YWxUcmF2ZXJzYWwubWFwKGEgPT4gYCR7YVswXX0gJHthWzFdLnR5cGV9YCksXG4gICAgZXhwZWN0ZWRUcmF2ZXJzYWwubWFwKGEgPT4gYCR7YVswXX0gJHthWzFdLnR5cGV9YClcbiAgKTtcblxuICBsZXQgbm9kZXNFcXVhbCA9IHRydWU7XG5cbiAgZm9yIChsZXQgaSA9IDA7IGkgPCBhY3R1YWxUcmF2ZXJzYWwubGVuZ3RoOyBpKyspIHtcbiAgICBpZiAoYWN0dWFsVHJhdmVyc2FsW2ldWzFdICE9PSBleHBlY3RlZFRyYXZlcnNhbFtpXVsxXSkge1xuICAgICAgbm9kZXNFcXVhbCA9IGZhbHNlO1xuICAgICAgYnJlYWs7XG4gICAgfVxuICB9XG5cbiAgb2sobm9kZXNFcXVhbCwgXCJBY3R1YWwgbm9kZXMgbWF0Y2ggZXhwZWN0ZWQgbm9kZXNcIik7XG59XG5cblFVbml0Lm1vZHVsZSgnW2h0bWxiYXJzLXN5bnRheF0gVHJhdmVyc2FsIC0gdmlzaXRpbmcnKTtcblxudGVzdCgnRWxlbWVudHMgYW5kIGF0dHJpYnV0ZXMnLCBmdW5jdGlvbigpIHtcbiAgbGV0IGFzdCA9IHBhcnNlKGA8ZGl2IGlkPVwiaWRcIiBjbGFzcz1cImxhcmdlIHt7Y2xhc3Nlc319XCIgdmFsdWU9e3t2YWx1ZX19PjxiPjwvYj48Yj48L2I+PC9kaXY+YCk7XG5cbiAgdHJhdmVyc2FsRXF1YWwoYXN0LCBbXG4gICAgWydlbnRlcicsIGFzdF0sXG4gICAgWydlbnRlcicsIGFzdC5ib2R5WzBdXSxcbiAgICBbJ2VudGVyJywgYXN0LmJvZHlbMF0uYXR0cmlidXRlc1swXV0sXG4gICAgWydlbnRlcicsIGFzdC5ib2R5WzBdLmF0dHJpYnV0ZXNbMF0udmFsdWVdLFxuICAgIFsnZXhpdCcsICBhc3QuYm9keVswXS5hdHRyaWJ1dGVzWzBdLnZhbHVlXSxcbiAgICBbJ2V4aXQnLCAgYXN0LmJvZHlbMF0uYXR0cmlidXRlc1swXV0sXG4gICAgWydlbnRlcicsIGFzdC5ib2R5WzBdLmF0dHJpYnV0ZXNbMV1dLFxuICAgIFsnZW50ZXInLCBhc3QuYm9keVswXS5hdHRyaWJ1dGVzWzFdLnZhbHVlXSxcbiAgICBbJ2VudGVyJywgYXN0LmJvZHlbMF0uYXR0cmlidXRlc1sxXS52YWx1ZS5wYXJ0c1swXV0sXG4gICAgWydleGl0JywgIGFzdC5ib2R5WzBdLmF0dHJpYnV0ZXNbMV0udmFsdWUucGFydHNbMF1dLFxuICAgIFsnZW50ZXInLCBhc3QuYm9keVswXS5hdHRyaWJ1dGVzWzFdLnZhbHVlLnBhcnRzWzFdXSxcbiAgICBbJ2V4aXQnLCAgYXN0LmJvZHlbMF0uYXR0cmlidXRlc1sxXS52YWx1ZS5wYXJ0c1sxXV0sXG4gICAgWydleGl0JywgIGFzdC5ib2R5WzBdLmF0dHJpYnV0ZXNbMV0udmFsdWVdLFxuICAgIFsnZXhpdCcsICBhc3QuYm9keVswXS5hdHRyaWJ1dGVzWzFdXSxcbiAgICBbJ2VudGVyJywgYXN0LmJvZHlbMF0uYXR0cmlidXRlc1syXV0sXG4gICAgWydlbnRlcicsIGFzdC5ib2R5WzBdLmF0dHJpYnV0ZXNbMl0udmFsdWVdLFxuICAgIFsnZW50ZXInLCBhc3QuYm9keVswXS5hdHRyaWJ1dGVzWzJdLnZhbHVlLnBhdGhdLFxuICAgIFsnZXhpdCcsICBhc3QuYm9keVswXS5hdHRyaWJ1dGVzWzJdLnZhbHVlLnBhdGhdLFxuICAgIFsnZW50ZXInLCBhc3QuYm9keVswXS5hdHRyaWJ1dGVzWzJdLnZhbHVlLmhhc2hdLFxuICAgIFsnZXhpdCcsICBhc3QuYm9keVswXS5hdHRyaWJ1dGVzWzJdLnZhbHVlLmhhc2hdLFxuICAgIFsnZXhpdCcsICBhc3QuYm9keVswXS5hdHRyaWJ1dGVzWzJdLnZhbHVlXSxcbiAgICBbJ2V4aXQnLCAgYXN0LmJvZHlbMF0uYXR0cmlidXRlc1syXV0sXG4gICAgWydlbnRlcicsIGFzdC5ib2R5WzBdLmNoaWxkcmVuWzBdXSxcbiAgICBbJ2V4aXQnLCAgYXN0LmJvZHlbMF0uY2hpbGRyZW5bMF1dLFxuICAgIFsnZW50ZXInLCBhc3QuYm9keVswXS5jaGlsZHJlblsxXV0sXG4gICAgWydleGl0JywgIGFzdC5ib2R5WzBdLmNoaWxkcmVuWzFdXSxcbiAgICBbJ2V4aXQnLCAgYXN0LmJvZHlbMF1dLFxuICAgIFsnZXhpdCcsICBhc3RdXG4gIF0pO1xufSk7XG5cbnRlc3QoJ0VsZW1lbnQgbW9kaWZpZXJzJywgZnVuY3Rpb24oKSB7XG4gIGxldCBhc3QgPSBwYXJzZShgPGRpdiB7e21vZGlmaWVyfX17e21vZGlmaWVyIHBhcmFtMSBwYXJhbTIga2V5MT12YWx1ZSBrZXkyPXZhbHVlfX0+PC9kaXY+YCk7XG5cbiAgdHJhdmVyc2FsRXF1YWwoYXN0LCBbXG4gICAgWydlbnRlcicsIGFzdF0sXG4gICAgWydlbnRlcicsIGFzdC5ib2R5WzBdXSxcbiAgICBbJ2VudGVyJywgYXN0LmJvZHlbMF0ubW9kaWZpZXJzWzBdXSxcbiAgICBbJ2VudGVyJywgYXN0LmJvZHlbMF0ubW9kaWZpZXJzWzBdLnBhdGhdLFxuICAgIFsnZXhpdCcsICBhc3QuYm9keVswXS5tb2RpZmllcnNbMF0ucGF0aF0sXG4gICAgWydlbnRlcicsIGFzdC5ib2R5WzBdLm1vZGlmaWVyc1swXS5oYXNoXSxcbiAgICBbJ2V4aXQnLCAgYXN0LmJvZHlbMF0ubW9kaWZpZXJzWzBdLmhhc2hdLFxuICAgIFsnZXhpdCcsICBhc3QuYm9keVswXS5tb2RpZmllcnNbMF1dLFxuICAgIFsnZW50ZXInLCBhc3QuYm9keVswXS5tb2RpZmllcnNbMV1dLFxuICAgIFsnZW50ZXInLCBhc3QuYm9keVswXS5tb2RpZmllcnNbMV0ucGF0aF0sXG4gICAgWydleGl0JywgIGFzdC5ib2R5WzBdLm1vZGlmaWVyc1sxXS5wYXRoXSxcbiAgICBbJ2VudGVyJywgYXN0LmJvZHlbMF0ubW9kaWZpZXJzWzFdLnBhcmFtc1swXV0sXG4gICAgWydleGl0JywgIGFzdC5ib2R5WzBdLm1vZGlmaWVyc1sxXS5wYXJhbXNbMF1dLFxuICAgIFsnZW50ZXInLCBhc3QuYm9keVswXS5tb2RpZmllcnNbMV0ucGFyYW1zWzFdXSxcbiAgICBbJ2V4aXQnLCAgYXN0LmJvZHlbMF0ubW9kaWZpZXJzWzFdLnBhcmFtc1sxXV0sXG4gICAgWydlbnRlcicsIGFzdC5ib2R5WzBdLm1vZGlmaWVyc1sxXS5oYXNoXSxcbiAgICBbJ2VudGVyJywgYXN0LmJvZHlbMF0ubW9kaWZpZXJzWzFdLmhhc2gucGFpcnNbMF1dLFxuICAgIFsnZW50ZXInLCBhc3QuYm9keVswXS5tb2RpZmllcnNbMV0uaGFzaC5wYWlyc1swXS52YWx1ZV0sXG4gICAgWydleGl0JywgIGFzdC5ib2R5WzBdLm1vZGlmaWVyc1sxXS5oYXNoLnBhaXJzWzBdLnZhbHVlXSxcbiAgICBbJ2V4aXQnICwgYXN0LmJvZHlbMF0ubW9kaWZpZXJzWzFdLmhhc2gucGFpcnNbMF1dLFxuICAgIFsnZW50ZXInLCBhc3QuYm9keVswXS5tb2RpZmllcnNbMV0uaGFzaC5wYWlyc1sxXV0sXG4gICAgWydlbnRlcicsIGFzdC5ib2R5WzBdLm1vZGlmaWVyc1sxXS5oYXNoLnBhaXJzWzFdLnZhbHVlXSxcbiAgICBbJ2V4aXQnLCAgYXN0LmJvZHlbMF0ubW9kaWZpZXJzWzFdLmhhc2gucGFpcnNbMV0udmFsdWVdLFxuICAgIFsnZXhpdCcgLCBhc3QuYm9keVswXS5tb2RpZmllcnNbMV0uaGFzaC5wYWlyc1sxXV0sXG4gICAgWydleGl0JywgIGFzdC5ib2R5WzBdLm1vZGlmaWVyc1sxXS5oYXNoXSxcbiAgICBbJ2V4aXQnLCAgYXN0LmJvZHlbMF0ubW9kaWZpZXJzWzFdXSxcbiAgICBbJ2V4aXQnLCAgYXN0LmJvZHlbMF1dLFxuICAgIFsnZXhpdCcsICBhc3RdXG4gIF0pO1xufSk7XG5cbnRlc3QoJ0Jsb2NrcycsIGZ1bmN0aW9uKCkge1xuICBsZXQgYXN0ID0gcGFyc2UoXG4gICAgYHt7I2Jsb2NrfX17ey9ibG9ja319YCArXG4gICAgYHt7I2Jsb2NrIHBhcmFtMSBwYXJhbTIga2V5MT12YWx1ZSBrZXkyPXZhbHVlfX08Yj48L2I+PGI+PC9iPnt7L2Jsb2NrfX1gXG4gICk7XG5cbiAgdHJhdmVyc2FsRXF1YWwoYXN0LCBbXG4gICAgWydlbnRlcicsIGFzdF0sXG4gICAgWydlbnRlcicsIGFzdC5ib2R5WzBdXSxcbiAgICBbJ2VudGVyJywgYXN0LmJvZHlbMF0ucGF0aF0sXG4gICAgWydleGl0JywgIGFzdC5ib2R5WzBdLnBhdGhdLFxuICAgIFsnZW50ZXInLCBhc3QuYm9keVswXS5oYXNoXSxcbiAgICBbJ2V4aXQnLCAgYXN0LmJvZHlbMF0uaGFzaF0sXG4gICAgWydlbnRlcicsIGFzdC5ib2R5WzBdLnByb2dyYW1dLFxuICAgIFsnZXhpdCcsICBhc3QuYm9keVswXS5wcm9ncmFtXSxcbiAgICBbJ2V4aXQnLCAgYXN0LmJvZHlbMF1dLFxuICAgIFsnZW50ZXInLCBhc3QuYm9keVsxXV0sXG4gICAgWydlbnRlcicsIGFzdC5ib2R5WzFdLnBhdGhdLFxuICAgIFsnZXhpdCcsICBhc3QuYm9keVsxXS5wYXRoXSxcbiAgICBbJ2VudGVyJywgYXN0LmJvZHlbMV0ucGFyYW1zWzBdXSxcbiAgICBbJ2V4aXQnLCAgYXN0LmJvZHlbMV0ucGFyYW1zWzBdXSxcbiAgICBbJ2VudGVyJywgYXN0LmJvZHlbMV0ucGFyYW1zWzFdXSxcbiAgICBbJ2V4aXQnLCAgYXN0LmJvZHlbMV0ucGFyYW1zWzFdXSxcbiAgICBbJ2VudGVyJywgYXN0LmJvZHlbMV0uaGFzaF0sXG4gICAgWydlbnRlcicsIGFzdC5ib2R5WzFdLmhhc2gucGFpcnNbMF1dLFxuICAgIFsnZW50ZXInLCBhc3QuYm9keVsxXS5oYXNoLnBhaXJzWzBdLnZhbHVlXSxcbiAgICBbJ2V4aXQnLCAgYXN0LmJvZHlbMV0uaGFzaC5wYWlyc1swXS52YWx1ZV0sXG4gICAgWydleGl0JywgIGFzdC5ib2R5WzFdLmhhc2gucGFpcnNbMF1dLFxuICAgIFsnZW50ZXInLCBhc3QuYm9keVsxXS5oYXNoLnBhaXJzWzFdXSxcbiAgICBbJ2VudGVyJywgYXN0LmJvZHlbMV0uaGFzaC5wYWlyc1sxXS52YWx1ZV0sXG4gICAgWydleGl0JywgIGFzdC5ib2R5WzFdLmhhc2gucGFpcnNbMV0udmFsdWVdLFxuICAgIFsnZXhpdCcsICBhc3QuYm9keVsxXS5oYXNoLnBhaXJzWzFdXSxcbiAgICBbJ2V4aXQnLCAgYXN0LmJvZHlbMV0uaGFzaF0sXG4gICAgWydlbnRlcicsIGFzdC5ib2R5WzFdLnByb2dyYW1dLFxuICAgIFsnZW50ZXInLCBhc3QuYm9keVsxXS5wcm9ncmFtLmJvZHlbMF1dLFxuICAgIFsnZXhpdCcsICBhc3QuYm9keVsxXS5wcm9ncmFtLmJvZHlbMF1dLFxuICAgIFsnZW50ZXInLCBhc3QuYm9keVsxXS5wcm9ncmFtLmJvZHlbMV1dLFxuICAgIFsnZXhpdCcsICBhc3QuYm9keVsxXS5wcm9ncmFtLmJvZHlbMV1dLFxuICAgIFsnZXhpdCcsICBhc3QuYm9keVsxXS5wcm9ncmFtXSxcbiAgICBbJ2V4aXQnLCAgYXN0LmJvZHlbMV1dLFxuICAgIFsnZXhpdCcsICBhc3RdXG4gIF0pO1xufSk7XG5cbnRlc3QoJ011c3RhY2hlcycsIGZ1bmN0aW9uKCkge1xuICBsZXQgYXN0ID0gcGFyc2UoXG4gICAgYHt7bXVzdGFjaGV9fWAgK1xuICAgIGB7e211c3RhY2hlIHBhcmFtMSBwYXJhbTIga2V5MT12YWx1ZSBrZXkyPXZhbHVlfX1gXG4gICk7XG5cbiAgdHJhdmVyc2FsRXF1YWwoYXN0LCBbXG4gICAgWydlbnRlcicsIGFzdF0sXG4gICAgWydlbnRlcicsIGFzdC5ib2R5WzBdXSxcbiAgICBbJ2VudGVyJywgYXN0LmJvZHlbMF0ucGF0aF0sXG4gICAgWydleGl0JywgIGFzdC5ib2R5WzBdLnBhdGhdLFxuICAgIFsnZW50ZXInLCBhc3QuYm9keVswXS5oYXNoXSxcbiAgICBbJ2V4aXQnLCAgYXN0LmJvZHlbMF0uaGFzaF0sXG4gICAgWydleGl0JywgIGFzdC5ib2R5WzBdXSxcbiAgICBbJ2VudGVyJywgYXN0LmJvZHlbMV1dLFxuICAgIFsnZW50ZXInLCBhc3QuYm9keVsxXS5wYXRoXSxcbiAgICBbJ2V4aXQnLCAgYXN0LmJvZHlbMV0ucGF0aF0sXG4gICAgWydlbnRlcicsIGFzdC5ib2R5WzFdLnBhcmFtc1swXV0sXG4gICAgWydleGl0JywgIGFzdC5ib2R5WzFdLnBhcmFtc1swXV0sXG4gICAgWydlbnRlcicsIGFzdC5ib2R5WzFdLnBhcmFtc1sxXV0sXG4gICAgWydleGl0JywgIGFzdC5ib2R5WzFdLnBhcmFtc1sxXV0sXG4gICAgWydlbnRlcicsIGFzdC5ib2R5WzFdLmhhc2hdLFxuICAgIFsnZW50ZXInLCBhc3QuYm9keVsxXS5oYXNoLnBhaXJzWzBdXSxcbiAgICBbJ2VudGVyJywgYXN0LmJvZHlbMV0uaGFzaC5wYWlyc1swXS52YWx1ZV0sXG4gICAgWydleGl0JywgIGFzdC5ib2R5WzFdLmhhc2gucGFpcnNbMF0udmFsdWVdLFxuICAgIFsnZXhpdCcsICBhc3QuYm9keVsxXS5oYXNoLnBhaXJzWzBdXSxcbiAgICBbJ2VudGVyJywgYXN0LmJvZHlbMV0uaGFzaC5wYWlyc1sxXV0sXG4gICAgWydlbnRlcicsIGFzdC5ib2R5WzFdLmhhc2gucGFpcnNbMV0udmFsdWVdLFxuICAgIFsnZXhpdCcsICBhc3QuYm9keVsxXS5oYXNoLnBhaXJzWzFdLnZhbHVlXSxcbiAgICBbJ2V4aXQnLCAgYXN0LmJvZHlbMV0uaGFzaC5wYWlyc1sxXV0sXG4gICAgWydleGl0JywgIGFzdC5ib2R5WzFdLmhhc2hdLFxuICAgIFsnZXhpdCcsICBhc3QuYm9keVsxXV0sXG4gICAgWydleGl0JywgIGFzdF1cbiAgXSk7XG59KTtcblxudGVzdCgnQ29tcG9uZW50cycsIGZ1bmN0aW9uKCkge1xuICBsZXQgYXN0ID0gcGFyc2UoXG4gICAgYDx4LWJsb2NrIC8+YCArXG4gICAgYDx4LWJsb2NrPjwveC1ibG9jaz5gICtcbiAgICBgPHgtYmxvY2sgaWQ9XCJpZFwiIGNsYXNzPVwibGFyZ2Uge3tjbGFzc2VzfX1cIiB2YWx1ZT17e3ZhbHVlfX0+PGI+PC9iPjxiPjwvYj48L3gtYmxvY2s+YFxuICApO1xuXG4gIHRyYXZlcnNhbEVxdWFsKGFzdCwgW1xuICAgIFsnZW50ZXInLCBhc3RdLFxuICAgIFsnZW50ZXInLCBhc3QuYm9keVswXV0sXG4gICAgWydlbnRlcicsIGFzdC5ib2R5WzBdLnByb2dyYW1dLFxuICAgIFsnZXhpdCcsICBhc3QuYm9keVswXS5wcm9ncmFtXSxcbiAgICBbJ2V4aXQnLCAgYXN0LmJvZHlbMF1dLFxuICAgIFsnZW50ZXInLCBhc3QuYm9keVsxXV0sXG4gICAgWydlbnRlcicsIGFzdC5ib2R5WzFdLnByb2dyYW1dLFxuICAgIFsnZXhpdCcsICBhc3QuYm9keVsxXS5wcm9ncmFtXSxcbiAgICBbJ2V4aXQnLCAgYXN0LmJvZHlbMV1dLFxuICAgIFsnZW50ZXInLCBhc3QuYm9keVsyXV0sXG4gICAgWydlbnRlcicsIGFzdC5ib2R5WzJdLmF0dHJpYnV0ZXNbMF1dLFxuICAgIFsnZW50ZXInLCBhc3QuYm9keVsyXS5hdHRyaWJ1dGVzWzBdLnZhbHVlXSxcbiAgICBbJ2V4aXQnLCAgYXN0LmJvZHlbMl0uYXR0cmlidXRlc1swXS52YWx1ZV0sXG4gICAgWydleGl0JywgIGFzdC5ib2R5WzJdLmF0dHJpYnV0ZXNbMF1dLFxuICAgIFsnZW50ZXInLCBhc3QuYm9keVsyXS5hdHRyaWJ1dGVzWzFdXSxcbiAgICBbJ2VudGVyJywgYXN0LmJvZHlbMl0uYXR0cmlidXRlc1sxXS52YWx1ZV0sXG4gICAgWydlbnRlcicsIGFzdC5ib2R5WzJdLmF0dHJpYnV0ZXNbMV0udmFsdWUucGFydHNbMF1dLFxuICAgIFsnZXhpdCcsICBhc3QuYm9keVsyXS5hdHRyaWJ1dGVzWzFdLnZhbHVlLnBhcnRzWzBdXSxcbiAgICBbJ2VudGVyJywgYXN0LmJvZHlbMl0uYXR0cmlidXRlc1sxXS52YWx1ZS5wYXJ0c1sxXV0sXG4gICAgWydleGl0JywgIGFzdC5ib2R5WzJdLmF0dHJpYnV0ZXNbMV0udmFsdWUucGFydHNbMV1dLFxuICAgIFsnZXhpdCcsICBhc3QuYm9keVsyXS5hdHRyaWJ1dGVzWzFdLnZhbHVlXSxcbiAgICBbJ2V4aXQnLCAgYXN0LmJvZHlbMl0uYXR0cmlidXRlc1sxXV0sXG4gICAgWydlbnRlcicsIGFzdC5ib2R5WzJdLmF0dHJpYnV0ZXNbMl1dLFxuICAgIFsnZW50ZXInLCBhc3QuYm9keVsyXS5hdHRyaWJ1dGVzWzJdLnZhbHVlXSxcbiAgICBbJ2VudGVyJywgYXN0LmJvZHlbMl0uYXR0cmlidXRlc1syXS52YWx1ZS5wYXRoXSxcbiAgICBbJ2V4aXQnLCAgYXN0LmJvZHlbMl0uYXR0cmlidXRlc1syXS52YWx1ZS5wYXRoXSxcbiAgICBbJ2VudGVyJywgYXN0LmJvZHlbMl0uYXR0cmlidXRlc1syXS52YWx1ZS5oYXNoXSxcbiAgICBbJ2V4aXQnLCAgYXN0LmJvZHlbMl0uYXR0cmlidXRlc1syXS52YWx1ZS5oYXNoXSxcbiAgICBbJ2V4aXQnLCAgYXN0LmJvZHlbMl0uYXR0cmlidXRlc1syXS52YWx1ZV0sXG4gICAgWydleGl0JywgIGFzdC5ib2R5WzJdLmF0dHJpYnV0ZXNbMl1dLFxuICAgIFsnZW50ZXInLCBhc3QuYm9keVsyXS5wcm9ncmFtXSxcbiAgICBbJ2VudGVyJywgYXN0LmJvZHlbMl0ucHJvZ3JhbS5ib2R5WzBdXSxcbiAgICBbJ2V4aXQnLCAgYXN0LmJvZHlbMl0ucHJvZ3JhbS5ib2R5WzBdXSxcbiAgICBbJ2VudGVyJywgYXN0LmJvZHlbMl0ucHJvZ3JhbS5ib2R5WzFdXSxcbiAgICBbJ2V4aXQnLCAgYXN0LmJvZHlbMl0ucHJvZ3JhbS5ib2R5WzFdXSxcbiAgICBbJ2V4aXQnLCAgYXN0LmJvZHlbMl0ucHJvZ3JhbV0sXG4gICAgWydleGl0JywgIGFzdC5ib2R5WzJdXSxcbiAgICBbJ2V4aXQnLCAgYXN0XVxuICBdKTtcbn0pO1xuXG50ZXN0KCdOZXN0ZWQgaGVscGVycycsIGZ1bmN0aW9uKCkge1xuICBsZXQgYXN0ID0gcGFyc2UoYHt7aGVscGVyXG4gICAgKGhlbHBlciBwYXJhbTEgcGFyYW0yIGtleTE9dmFsdWUga2V5Mj12YWx1ZSlcbiAgICBrZXkxPShoZWxwZXIgcGFyYW0pXG4gICAga2V5Mj0oaGVscGVyIGtleT0oaGVscGVyIHBhcmFtKSlcbiAgfX1gKTtcblxuICB0cmF2ZXJzYWxFcXVhbChhc3QsIFtcbiAgICBbJ2VudGVyJywgYXN0XSxcbiAgICBbJ2VudGVyJywgYXN0LmJvZHlbMF1dLFxuICAgIFsnZW50ZXInLCBhc3QuYm9keVswXS5wYXRoXSxcbiAgICBbJ2V4aXQnLCAgYXN0LmJvZHlbMF0ucGF0aF0sXG4gICAgWydlbnRlcicsIGFzdC5ib2R5WzBdLnBhcmFtc1swXV0sXG4gICAgWydlbnRlcicsIGFzdC5ib2R5WzBdLnBhcmFtc1swXS5wYXRoXSxcbiAgICBbJ2V4aXQnLCAgYXN0LmJvZHlbMF0ucGFyYW1zWzBdLnBhdGhdLFxuICAgIFsnZW50ZXInLCBhc3QuYm9keVswXS5wYXJhbXNbMF0ucGFyYW1zWzBdXSxcbiAgICBbJ2V4aXQnLCAgYXN0LmJvZHlbMF0ucGFyYW1zWzBdLnBhcmFtc1swXV0sXG4gICAgWydlbnRlcicsIGFzdC5ib2R5WzBdLnBhcmFtc1swXS5wYXJhbXNbMV1dLFxuICAgIFsnZXhpdCcsICBhc3QuYm9keVswXS5wYXJhbXNbMF0ucGFyYW1zWzFdXSxcbiAgICBbJ2VudGVyJywgYXN0LmJvZHlbMF0ucGFyYW1zWzBdLmhhc2hdLFxuICAgIFsnZW50ZXInLCBhc3QuYm9keVswXS5wYXJhbXNbMF0uaGFzaC5wYWlyc1swXV0sXG4gICAgWydlbnRlcicsIGFzdC5ib2R5WzBdLnBhcmFtc1swXS5oYXNoLnBhaXJzWzBdLnZhbHVlXSxcbiAgICBbJ2V4aXQnLCAgYXN0LmJvZHlbMF0ucGFyYW1zWzBdLmhhc2gucGFpcnNbMF0udmFsdWVdLFxuICAgIFsnZXhpdCcsICBhc3QuYm9keVswXS5wYXJhbXNbMF0uaGFzaC5wYWlyc1swXV0sXG4gICAgWydlbnRlcicsIGFzdC5ib2R5WzBdLnBhcmFtc1swXS5oYXNoLnBhaXJzWzFdXSxcbiAgICBbJ2VudGVyJywgYXN0LmJvZHlbMF0ucGFyYW1zWzBdLmhhc2gucGFpcnNbMV0udmFsdWVdLFxuICAgIFsnZXhpdCcsICBhc3QuYm9keVswXS5wYXJhbXNbMF0uaGFzaC5wYWlyc1sxXS52YWx1ZV0sXG4gICAgWydleGl0JywgIGFzdC5ib2R5WzBdLnBhcmFtc1swXS5oYXNoLnBhaXJzWzFdXSxcbiAgICBbJ2V4aXQnLCAgYXN0LmJvZHlbMF0ucGFyYW1zWzBdLmhhc2hdLFxuICAgIFsnZXhpdCcsICBhc3QuYm9keVswXS5wYXJhbXNbMF1dLFxuICAgIFsnZW50ZXInLCBhc3QuYm9keVswXS5oYXNoXSxcbiAgICBbJ2VudGVyJywgYXN0LmJvZHlbMF0uaGFzaC5wYWlyc1swXV0sXG4gICAgWydlbnRlcicsIGFzdC5ib2R5WzBdLmhhc2gucGFpcnNbMF0udmFsdWVdLFxuICAgIFsnZW50ZXInLCBhc3QuYm9keVswXS5oYXNoLnBhaXJzWzBdLnZhbHVlLnBhdGhdLFxuICAgIFsnZXhpdCcsICBhc3QuYm9keVswXS5oYXNoLnBhaXJzWzBdLnZhbHVlLnBhdGhdLFxuICAgIFsnZW50ZXInLCBhc3QuYm9keVswXS5oYXNoLnBhaXJzWzBdLnZhbHVlLnBhcmFtc1swXV0sXG4gICAgWydleGl0JywgIGFzdC5ib2R5WzBdLmhhc2gucGFpcnNbMF0udmFsdWUucGFyYW1zWzBdXSxcbiAgICBbJ2VudGVyJywgYXN0LmJvZHlbMF0uaGFzaC5wYWlyc1swXS52YWx1ZS5oYXNoXSxcbiAgICBbJ2V4aXQnLCAgYXN0LmJvZHlbMF0uaGFzaC5wYWlyc1swXS52YWx1ZS5oYXNoXSxcbiAgICBbJ2V4aXQnLCAgYXN0LmJvZHlbMF0uaGFzaC5wYWlyc1swXS52YWx1ZV0sXG4gICAgWydleGl0JywgIGFzdC5ib2R5WzBdLmhhc2gucGFpcnNbMF1dLFxuICAgIFsnZW50ZXInLCBhc3QuYm9keVswXS5oYXNoLnBhaXJzWzFdXSxcbiAgICBbJ2VudGVyJywgYXN0LmJvZHlbMF0uaGFzaC5wYWlyc1sxXS52YWx1ZV0sXG4gICAgWydlbnRlcicsIGFzdC5ib2R5WzBdLmhhc2gucGFpcnNbMV0udmFsdWUucGF0aF0sXG4gICAgWydleGl0JywgIGFzdC5ib2R5WzBdLmhhc2gucGFpcnNbMV0udmFsdWUucGF0aF0sXG4gICAgWydlbnRlcicsIGFzdC5ib2R5WzBdLmhhc2gucGFpcnNbMV0udmFsdWUuaGFzaF0sXG4gICAgWydlbnRlcicsIGFzdC5ib2R5WzBdLmhhc2gucGFpcnNbMV0udmFsdWUuaGFzaC5wYWlyc1swXV0sXG4gICAgWydlbnRlcicsIGFzdC5ib2R5WzBdLmhhc2gucGFpcnNbMV0udmFsdWUuaGFzaC5wYWlyc1swXS52YWx1ZV0sXG4gICAgWydlbnRlcicsIGFzdC5ib2R5WzBdLmhhc2gucGFpcnNbMV0udmFsdWUuaGFzaC5wYWlyc1swXS52YWx1ZS5wYXRoXSxcbiAgICBbJ2V4aXQnLCAgYXN0LmJvZHlbMF0uaGFzaC5wYWlyc1sxXS52YWx1ZS5oYXNoLnBhaXJzWzBdLnZhbHVlLnBhdGhdLFxuICAgIFsnZW50ZXInLCBhc3QuYm9keVswXS5oYXNoLnBhaXJzWzFdLnZhbHVlLmhhc2gucGFpcnNbMF0udmFsdWUucGFyYW1zWzBdXSxcbiAgICBbJ2V4aXQnLCAgYXN0LmJvZHlbMF0uaGFzaC5wYWlyc1sxXS52YWx1ZS5oYXNoLnBhaXJzWzBdLnZhbHVlLnBhcmFtc1swXV0sXG4gICAgWydlbnRlcicsIGFzdC5ib2R5WzBdLmhhc2gucGFpcnNbMV0udmFsdWUuaGFzaC5wYWlyc1swXS52YWx1ZS5oYXNoXSxcbiAgICBbJ2V4aXQnLCAgYXN0LmJvZHlbMF0uaGFzaC5wYWlyc1sxXS52YWx1ZS5oYXNoLnBhaXJzWzBdLnZhbHVlLmhhc2hdLFxuICAgIFsnZXhpdCcsICBhc3QuYm9keVswXS5oYXNoLnBhaXJzWzFdLnZhbHVlLmhhc2gucGFpcnNbMF0udmFsdWVdLFxuICAgIFsnZXhpdCcsICBhc3QuYm9keVswXS5oYXNoLnBhaXJzWzFdLnZhbHVlLmhhc2gucGFpcnNbMF1dLFxuICAgIFsnZXhpdCcsICBhc3QuYm9keVswXS5oYXNoLnBhaXJzWzFdLnZhbHVlLmhhc2hdLFxuICAgIFsnZXhpdCcsICBhc3QuYm9keVswXS5oYXNoLnBhaXJzWzFdLnZhbHVlXSxcbiAgICBbJ2V4aXQnLCAgYXN0LmJvZHlbMF0uaGFzaC5wYWlyc1sxXV0sXG4gICAgWydleGl0JywgIGFzdC5ib2R5WzBdLmhhc2hdLFxuICAgIFsnZXhpdCcsICBhc3QuYm9keVswXV0sXG4gICAgWydleGl0JywgIGFzdF1cbiAgXSk7XG59KTtcblxudGVzdCgnQ29tbWVudHMnLCBmdW5jdGlvbigpIHtcbiAgbGV0IGFzdCA9IHBhcnNlKGA8IS0tIEhUTUwgY29tbWVudCAtLT57eyEtLSBIYW5kbGViYXJzIGNvbW1lbnQgLS19fWApO1xuXG4gIHRyYXZlcnNhbEVxdWFsKGFzdCwgW1xuICAgIFsnZW50ZXInLCBhc3RdLFxuICAgIFsnZW50ZXInLCBhc3QuYm9keVswXV0sXG4gICAgWydleGl0JywgIGFzdC5ib2R5WzBdXSxcbiAgICAvLyBUT0RPOiBFbnN1cmUgSGFuZGxlYmFycyBjb21tZW50cyBhcmUgaW4gdGhlIEFTVC5cbiAgICAvLyBbJ2VudGVyJywgYXN0LmJvZHlbMV1dLFxuICAgIC8vIFsnZXhpdCcsICBhc3QuYm9keVsxXV0sXG4gICAgWydleGl0JywgIGFzdF1cbiAgXSk7XG59KTtcbiJdfQ==
define('htmlbars-syntax-tests/traversal/visiting-node-test.jshint', ['exports'], function (exports) {
  module('JSHint - htmlbars-syntax-tests/traversal');
  test('htmlbars-syntax-tests/traversal/visiting-node-test.js should pass jshint', function () {
    ok(true, 'htmlbars-syntax-tests/traversal/visiting-node-test.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXN5bnRheC10ZXN0cy90cmF2ZXJzYWwvdmlzaXRpbmctbm9kZS10ZXN0LmpzaGludC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiO0FBQUEsUUFBTSxDQUFDLDBDQUEwQyxDQUFDLENBQUM7QUFDbkQsTUFBSSxDQUFDLDBFQUEwRSxFQUFFLFlBQVc7QUFDMUYsTUFBRSxDQUFDLElBQUksRUFBRSwyRUFBMkUsQ0FBQyxDQUFDO0dBQ3ZGLENBQUMsQ0FBQyIsImZpbGUiOiJodG1sYmFycy1zeW50YXgtdGVzdHMvdHJhdmVyc2FsL3Zpc2l0aW5nLW5vZGUtdGVzdC5qc2hpbnQuanMiLCJzb3VyY2VzQ29udGVudCI6WyJtb2R1bGUoJ0pTSGludCAtIGh0bWxiYXJzLXN5bnRheC10ZXN0cy90cmF2ZXJzYWwnKTtcbnRlc3QoJ2h0bWxiYXJzLXN5bnRheC10ZXN0cy90cmF2ZXJzYWwvdmlzaXRpbmctbm9kZS10ZXN0LmpzIHNob3VsZCBwYXNzIGpzaGludCcsIGZ1bmN0aW9uKCkgeyBcbiAgb2sodHJ1ZSwgJ2h0bWxiYXJzLXN5bnRheC10ZXN0cy90cmF2ZXJzYWwvdmlzaXRpbmctbm9kZS10ZXN0LmpzIHNob3VsZCBwYXNzIGpzaGludC4nKTsgXG59KTtcbiJdfQ==
define('htmlbars-syntax-tests/traversal/walker-node-test', ['exports', '../../htmlbars-syntax'], function (exports, _htmlbarsSyntax) {

  function compareWalkedNodes(html, expected) {
    var ast = _htmlbarsSyntax.parse(html);
    var walker = new _htmlbarsSyntax.Walker();
    var nodes = [];

    walker.visit(ast, function (node) {
      nodes.push(node.type);
    });

    deepEqual(nodes, expected);
  }

  QUnit.module('[htmlbars-syntax] AST Walker');

  test('walks elements', function () {
    compareWalkedNodes('<div><li></li></div>', ['Program', 'ElementNode', 'ElementNode']);
  });

  test('walks blocks', function () {
    compareWalkedNodes('{{#foo}}<li></li>{{/foo}}', ['Program', 'BlockStatement', 'Program', 'ElementNode']);
  });

  test('walks components', function () {
    compareWalkedNodes('<my-foo><li></li></my-foo>', ['Program', 'ComponentNode', 'Program', 'ElementNode']);
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXN5bnRheC10ZXN0cy90cmF2ZXJzYWwvd2Fsa2VyLW5vZGUtdGVzdC5qcyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOztBQUVBLFdBQVMsa0JBQWtCLENBQUMsSUFBSSxFQUFFLFFBQVEsRUFBRTtBQUMxQyxRQUFJLEdBQUcsR0FBRyxnQkFISCxLQUFLLENBR0ksSUFBSSxDQUFDLENBQUM7QUFDdEIsUUFBSSxNQUFNLEdBQUcsb0JBSkMsTUFBTSxFQUlLLENBQUM7QUFDMUIsUUFBSSxLQUFLLEdBQUcsRUFBRSxDQUFDOztBQUVmLFVBQU0sQ0FBQyxLQUFLLENBQUMsR0FBRyxFQUFFLFVBQVMsSUFBSSxFQUFFO0FBQy9CLFdBQUssQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO0tBQ3ZCLENBQUMsQ0FBQzs7QUFFSCxhQUFTLENBQUMsS0FBSyxFQUFFLFFBQVEsQ0FBQyxDQUFDO0dBQzVCOztBQUVELE9BQUssQ0FBQyxNQUFNLENBQUMsOEJBQThCLENBQUMsQ0FBQzs7QUFFN0MsTUFBSSxDQUFDLGdCQUFnQixFQUFFLFlBQVc7QUFDaEMsc0JBQWtCLENBQUMsc0JBQXNCLEVBQUUsQ0FDekMsU0FBUyxFQUNULGFBQWEsRUFDYixhQUFhLENBQ2QsQ0FBQyxDQUFDO0dBQ0osQ0FBQyxDQUFDOztBQUVILE1BQUksQ0FBQyxjQUFjLEVBQUUsWUFBVztBQUM5QixzQkFBa0IsQ0FBQywyQkFBMkIsRUFBRSxDQUM5QyxTQUFTLEVBQ1QsZ0JBQWdCLEVBQ2hCLFNBQVMsRUFDVCxhQUFhLENBQ2QsQ0FBQyxDQUFDO0dBQ0osQ0FBQyxDQUFDOztBQUVILE1BQUksQ0FBQyxrQkFBa0IsRUFBRSxZQUFXO0FBQ2xDLHNCQUFrQixDQUFDLDRCQUE0QixFQUFFLENBQy9DLFNBQVMsRUFDVCxlQUFlLEVBQ2YsU0FBUyxFQUNULGFBQWEsQ0FDZCxDQUFDLENBQUM7R0FDSixDQUFDLENBQUMiLCJmaWxlIjoiaHRtbGJhcnMtc3ludGF4LXRlc3RzL3RyYXZlcnNhbC93YWxrZXItbm9kZS10ZXN0LmpzIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgcGFyc2UsIFdhbGtlciB9IGZyb20gJy4uLy4uL2h0bWxiYXJzLXN5bnRheCc7XG5cbmZ1bmN0aW9uIGNvbXBhcmVXYWxrZWROb2RlcyhodG1sLCBleHBlY3RlZCkge1xuICB2YXIgYXN0ID0gcGFyc2UoaHRtbCk7XG4gIHZhciB3YWxrZXIgPSBuZXcgV2Fsa2VyKCk7XG4gIHZhciBub2RlcyA9IFtdO1xuXG4gIHdhbGtlci52aXNpdChhc3QsIGZ1bmN0aW9uKG5vZGUpIHtcbiAgICBub2Rlcy5wdXNoKG5vZGUudHlwZSk7XG4gIH0pO1xuXG4gIGRlZXBFcXVhbChub2RlcywgZXhwZWN0ZWQpO1xufVxuXG5RVW5pdC5tb2R1bGUoJ1todG1sYmFycy1zeW50YXhdIEFTVCBXYWxrZXInKTtcblxudGVzdCgnd2Fsa3MgZWxlbWVudHMnLCBmdW5jdGlvbigpIHtcbiAgY29tcGFyZVdhbGtlZE5vZGVzKCc8ZGl2PjxsaT48L2xpPjwvZGl2PicsIFtcbiAgICAnUHJvZ3JhbScsXG4gICAgJ0VsZW1lbnROb2RlJyxcbiAgICAnRWxlbWVudE5vZGUnXG4gIF0pO1xufSk7XG5cbnRlc3QoJ3dhbGtzIGJsb2NrcycsIGZ1bmN0aW9uKCkge1xuICBjb21wYXJlV2Fsa2VkTm9kZXMoJ3t7I2Zvb319PGxpPjwvbGk+e3svZm9vfX0nLCBbXG4gICAgJ1Byb2dyYW0nLFxuICAgICdCbG9ja1N0YXRlbWVudCcsXG4gICAgJ1Byb2dyYW0nLFxuICAgICdFbGVtZW50Tm9kZSdcbiAgXSk7XG59KTtcblxudGVzdCgnd2Fsa3MgY29tcG9uZW50cycsIGZ1bmN0aW9uKCkge1xuICBjb21wYXJlV2Fsa2VkTm9kZXMoJzxteS1mb28+PGxpPjwvbGk+PC9teS1mb28+JywgW1xuICAgICdQcm9ncmFtJyxcbiAgICAnQ29tcG9uZW50Tm9kZScsXG4gICAgJ1Byb2dyYW0nLFxuICAgICdFbGVtZW50Tm9kZSdcbiAgXSk7XG59KTtcbiJdfQ==
define('htmlbars-syntax-tests/traversal/walker-node-test.jshint', ['exports'], function (exports) {
  module('JSHint - htmlbars-syntax-tests/traversal');
  test('htmlbars-syntax-tests/traversal/walker-node-test.js should pass jshint', function () {
    ok(true, 'htmlbars-syntax-tests/traversal/walker-node-test.js should pass jshint.');
  });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXN5bnRheC10ZXN0cy90cmF2ZXJzYWwvd2Fsa2VyLW5vZGUtdGVzdC5qc2hpbnQuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLFFBQU0sQ0FBQywwQ0FBMEMsQ0FBQyxDQUFDO0FBQ25ELE1BQUksQ0FBQyx3RUFBd0UsRUFBRSxZQUFXO0FBQ3hGLE1BQUUsQ0FBQyxJQUFJLEVBQUUseUVBQXlFLENBQUMsQ0FBQztHQUNyRixDQUFDLENBQUMiLCJmaWxlIjoiaHRtbGJhcnMtc3ludGF4LXRlc3RzL3RyYXZlcnNhbC93YWxrZXItbm9kZS10ZXN0LmpzaGludC5qcyIsInNvdXJjZXNDb250ZW50IjpbIm1vZHVsZSgnSlNIaW50IC0gaHRtbGJhcnMtc3ludGF4LXRlc3RzL3RyYXZlcnNhbCcpO1xudGVzdCgnaHRtbGJhcnMtc3ludGF4LXRlc3RzL3RyYXZlcnNhbC93YWxrZXItbm9kZS10ZXN0LmpzIHNob3VsZCBwYXNzIGpzaGludCcsIGZ1bmN0aW9uKCkgeyBcbiAgb2sodHJ1ZSwgJ2h0bWxiYXJzLXN5bnRheC10ZXN0cy90cmF2ZXJzYWwvd2Fsa2VyLW5vZGUtdGVzdC5qcyBzaG91bGQgcGFzcyBqc2hpbnQuJyk7IFxufSk7XG4iXX0=