exports.__esModule = true;
exports.visitChildren = visitChildren;
exports.validateChildMorphs = validateChildMorphs;
exports.linkParams = linkParams;
exports.dump = dump;
/*globals console*/

function visitChildren(nodes, callback) {
  if (!nodes || nodes.length === 0) {
    return;
  }

  nodes = nodes.slice();

  while (nodes.length) {
    var node = nodes.pop();
    callback(node);

    if (node.childNodes) {
      nodes.push.apply(nodes, node.childNodes);
    } else if (node.firstChildMorph) {
      var current = node.firstChildMorph;

      while (current) {
        nodes.push(current);
        current = current.nextMorph;
      }
    } else if (node.morphList) {
      nodes.push(node.morphList);
    }
  }
}

function validateChildMorphs(env, morph, visitor) {
  var morphList = morph.morphList;
  if (morph.morphList) {
    var current = morphList.firstChildMorph;

    while (current) {
      var next = current.nextMorph;
      validateChildMorphs(env, current, visitor);
      current = next;
    }
  } else if (morph.lastResult) {
    morph.lastResult.revalidateWith(env, undefined, undefined, undefined, visitor);
  } else if (morph.childNodes) {
    // This means that the childNodes were wired up manually
    for (var i = 0, l = morph.childNodes.length; i < l; i++) {
      validateChildMorphs(env, morph.childNodes[i], visitor);
    }
  }
}

function linkParams(env, scope, morph, path, params, hash) {
  if (morph.linkedParams) {
    return;
  }

  if (env.hooks.linkRenderNode(morph, env, scope, path, params, hash)) {
    morph.linkedParams = { params: params, hash: hash };
  }
}

function dump(node) {
  console.group(node, node.isDirty);

  if (node.childNodes) {
    map(node.childNodes, dump);
  } else if (node.firstChildMorph) {
    var current = node.firstChildMorph;

    while (current) {
      dump(current);
      current = current.nextMorph;
    }
  } else if (node.morphList) {
    dump(node.morphList);
  }

  console.groupEnd();
}

function map(nodes, cb) {
  for (var i = 0, l = nodes.length; i < l; i++) {
    cb(nodes[i]);
  }
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXV0aWwvbW9ycGgtdXRpbHMuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtRQUVnQixhQUFhLEdBQWIsYUFBYTtRQXdCYixtQkFBbUIsR0FBbkIsbUJBQW1CO1FBb0JuQixVQUFVLEdBQVYsVUFBVTtRQVVWLElBQUksR0FBSixJQUFJOzs7QUF0RGIsU0FBUyxhQUFhLENBQUMsS0FBSyxFQUFFLFFBQVEsRUFBRTtBQUM3QyxNQUFJLENBQUMsS0FBSyxJQUFJLEtBQUssQ0FBQyxNQUFNLEtBQUssQ0FBQyxFQUFFO0FBQUUsV0FBTztHQUFFOztBQUU3QyxPQUFLLEdBQUcsS0FBSyxDQUFDLEtBQUssRUFBRSxDQUFDOztBQUV0QixTQUFPLEtBQUssQ0FBQyxNQUFNLEVBQUU7QUFDbkIsUUFBSSxJQUFJLEdBQUcsS0FBSyxDQUFDLEdBQUcsRUFBRSxDQUFDO0FBQ3ZCLFlBQVEsQ0FBQyxJQUFJLENBQUMsQ0FBQzs7QUFFZixRQUFJLElBQUksQ0FBQyxVQUFVLEVBQUU7QUFDbkIsV0FBSyxDQUFDLElBQUksQ0FBQyxLQUFLLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxVQUFVLENBQUMsQ0FBQztLQUMxQyxNQUFNLElBQUksSUFBSSxDQUFDLGVBQWUsRUFBRTtBQUMvQixVQUFJLE9BQU8sR0FBRyxJQUFJLENBQUMsZUFBZSxDQUFDOztBQUVuQyxhQUFPLE9BQU8sRUFBRTtBQUNkLGFBQUssQ0FBQyxJQUFJLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDcEIsZUFBTyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUM7T0FDN0I7S0FDRixNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtBQUN6QixXQUFLLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztLQUM1QjtHQUNGO0NBQ0Y7O0FBRU0sU0FBUyxtQkFBbUIsQ0FBQyxHQUFHLEVBQUUsS0FBSyxFQUFFLE9BQU8sRUFBRTtBQUN2RCxNQUFJLFNBQVMsR0FBRyxLQUFLLENBQUMsU0FBUyxDQUFDO0FBQ2hDLE1BQUksS0FBSyxDQUFDLFNBQVMsRUFBRTtBQUNuQixRQUFJLE9BQU8sR0FBRyxTQUFTLENBQUMsZUFBZSxDQUFDOztBQUV4QyxXQUFPLE9BQU8sRUFBRTtBQUNkLFVBQUksSUFBSSxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUM7QUFDN0IseUJBQW1CLENBQUMsR0FBRyxFQUFFLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQztBQUMzQyxhQUFPLEdBQUcsSUFBSSxDQUFDO0tBQ2hCO0dBQ0YsTUFBTSxJQUFJLEtBQUssQ0FBQyxVQUFVLEVBQUU7QUFDM0IsU0FBSyxDQUFDLFVBQVUsQ0FBQyxjQUFjLENBQUMsR0FBRyxFQUFFLFNBQVMsRUFBRSxTQUFTLEVBQUUsU0FBUyxFQUFFLE9BQU8sQ0FBQyxDQUFDO0dBQ2hGLE1BQU0sSUFBSSxLQUFLLENBQUMsVUFBVSxFQUFFOztBQUUzQixTQUFLLElBQUksQ0FBQyxHQUFDLENBQUMsRUFBRSxDQUFDLEdBQUMsS0FBSyxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUNqRCx5QkFBbUIsQ0FBQyxHQUFHLEVBQUUsS0FBSyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBRSxPQUFPLENBQUMsQ0FBQztLQUN4RDtHQUNGO0NBQ0Y7O0FBRU0sU0FBUyxVQUFVLENBQUMsR0FBRyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsSUFBSSxFQUFFLE1BQU0sRUFBRSxJQUFJLEVBQUU7QUFDaEUsTUFBSSxLQUFLLENBQUMsWUFBWSxFQUFFO0FBQ3RCLFdBQU87R0FDUjs7QUFFRCxNQUFJLEdBQUcsQ0FBQyxLQUFLLENBQUMsY0FBYyxDQUFDLEtBQUssRUFBRSxHQUFHLEVBQUUsS0FBSyxFQUFFLElBQUksRUFBRSxNQUFNLEVBQUUsSUFBSSxDQUFDLEVBQUU7QUFDbkUsU0FBSyxDQUFDLFlBQVksR0FBRyxFQUFFLE1BQU0sRUFBRSxNQUFNLEVBQUUsSUFBSSxFQUFFLElBQUksRUFBRSxDQUFDO0dBQ3JEO0NBQ0Y7O0FBRU0sU0FBUyxJQUFJLENBQUMsSUFBSSxFQUFFO0FBQ3pCLFNBQU8sQ0FBQyxLQUFLLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxPQUFPLENBQUMsQ0FBQzs7QUFFbEMsTUFBSSxJQUFJLENBQUMsVUFBVSxFQUFFO0FBQ25CLE9BQUcsQ0FBQyxJQUFJLENBQUMsVUFBVSxFQUFFLElBQUksQ0FBQyxDQUFDO0dBQzVCLE1BQU0sSUFBSSxJQUFJLENBQUMsZUFBZSxFQUFFO0FBQy9CLFFBQUksT0FBTyxHQUFHLElBQUksQ0FBQyxlQUFlLENBQUM7O0FBRW5DLFdBQU8sT0FBTyxFQUFFO0FBQ2QsVUFBSSxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ2QsYUFBTyxHQUFHLE9BQU8sQ0FBQyxTQUFTLENBQUM7S0FDN0I7R0FDRixNQUFNLElBQUksSUFBSSxDQUFDLFNBQVMsRUFBRTtBQUN6QixRQUFJLENBQUMsSUFBSSxDQUFDLFNBQVMsQ0FBQyxDQUFDO0dBQ3RCOztBQUVELFNBQU8sQ0FBQyxRQUFRLEVBQUUsQ0FBQztDQUNwQjs7QUFFRCxTQUFTLEdBQUcsQ0FBQyxLQUFLLEVBQUUsRUFBRSxFQUFFO0FBQ3RCLE9BQUssSUFBSSxDQUFDLEdBQUMsQ0FBQyxFQUFFLENBQUMsR0FBQyxLQUFLLENBQUMsTUFBTSxFQUFFLENBQUMsR0FBQyxDQUFDLEVBQUUsQ0FBQyxFQUFFLEVBQUU7QUFDdEMsTUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0dBQ2Q7Q0FDRiIsImZpbGUiOiJodG1sYmFycy11dGlsL21vcnBoLXV0aWxzLmpzIiwic291cmNlc0NvbnRlbnQiOlsiLypnbG9iYWxzIGNvbnNvbGUqL1xuXG5leHBvcnQgZnVuY3Rpb24gdmlzaXRDaGlsZHJlbihub2RlcywgY2FsbGJhY2spIHtcbiAgaWYgKCFub2RlcyB8fCBub2Rlcy5sZW5ndGggPT09IDApIHsgcmV0dXJuOyB9XG5cbiAgbm9kZXMgPSBub2Rlcy5zbGljZSgpO1xuXG4gIHdoaWxlIChub2Rlcy5sZW5ndGgpIHtcbiAgICB2YXIgbm9kZSA9IG5vZGVzLnBvcCgpO1xuICAgIGNhbGxiYWNrKG5vZGUpO1xuXG4gICAgaWYgKG5vZGUuY2hpbGROb2Rlcykge1xuICAgICAgbm9kZXMucHVzaC5hcHBseShub2Rlcywgbm9kZS5jaGlsZE5vZGVzKTtcbiAgICB9IGVsc2UgaWYgKG5vZGUuZmlyc3RDaGlsZE1vcnBoKSB7XG4gICAgICB2YXIgY3VycmVudCA9IG5vZGUuZmlyc3RDaGlsZE1vcnBoO1xuXG4gICAgICB3aGlsZSAoY3VycmVudCkge1xuICAgICAgICBub2Rlcy5wdXNoKGN1cnJlbnQpO1xuICAgICAgICBjdXJyZW50ID0gY3VycmVudC5uZXh0TW9ycGg7XG4gICAgICB9XG4gICAgfSBlbHNlIGlmIChub2RlLm1vcnBoTGlzdCkge1xuICAgICAgbm9kZXMucHVzaChub2RlLm1vcnBoTGlzdCk7XG4gICAgfVxuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiB2YWxpZGF0ZUNoaWxkTW9ycGhzKGVudiwgbW9ycGgsIHZpc2l0b3IpIHtcbiAgdmFyIG1vcnBoTGlzdCA9IG1vcnBoLm1vcnBoTGlzdDtcbiAgaWYgKG1vcnBoLm1vcnBoTGlzdCkge1xuICAgIHZhciBjdXJyZW50ID0gbW9ycGhMaXN0LmZpcnN0Q2hpbGRNb3JwaDtcblxuICAgIHdoaWxlIChjdXJyZW50KSB7XG4gICAgICB2YXIgbmV4dCA9IGN1cnJlbnQubmV4dE1vcnBoO1xuICAgICAgdmFsaWRhdGVDaGlsZE1vcnBocyhlbnYsIGN1cnJlbnQsIHZpc2l0b3IpO1xuICAgICAgY3VycmVudCA9IG5leHQ7XG4gICAgfVxuICB9IGVsc2UgaWYgKG1vcnBoLmxhc3RSZXN1bHQpIHtcbiAgICBtb3JwaC5sYXN0UmVzdWx0LnJldmFsaWRhdGVXaXRoKGVudiwgdW5kZWZpbmVkLCB1bmRlZmluZWQsIHVuZGVmaW5lZCwgdmlzaXRvcik7XG4gIH0gZWxzZSBpZiAobW9ycGguY2hpbGROb2Rlcykge1xuICAgIC8vIFRoaXMgbWVhbnMgdGhhdCB0aGUgY2hpbGROb2RlcyB3ZXJlIHdpcmVkIHVwIG1hbnVhbGx5XG4gICAgZm9yICh2YXIgaT0wLCBsPW1vcnBoLmNoaWxkTm9kZXMubGVuZ3RoOyBpPGw7IGkrKykge1xuICAgICAgdmFsaWRhdGVDaGlsZE1vcnBocyhlbnYsIG1vcnBoLmNoaWxkTm9kZXNbaV0sIHZpc2l0b3IpO1xuICAgIH1cbiAgfVxufVxuXG5leHBvcnQgZnVuY3Rpb24gbGlua1BhcmFtcyhlbnYsIHNjb3BlLCBtb3JwaCwgcGF0aCwgcGFyYW1zLCBoYXNoKSB7XG4gIGlmIChtb3JwaC5saW5rZWRQYXJhbXMpIHtcbiAgICByZXR1cm47XG4gIH1cblxuICBpZiAoZW52Lmhvb2tzLmxpbmtSZW5kZXJOb2RlKG1vcnBoLCBlbnYsIHNjb3BlLCBwYXRoLCBwYXJhbXMsIGhhc2gpKSB7XG4gICAgbW9ycGgubGlua2VkUGFyYW1zID0geyBwYXJhbXM6IHBhcmFtcywgaGFzaDogaGFzaCB9O1xuICB9XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBkdW1wKG5vZGUpIHtcbiAgY29uc29sZS5ncm91cChub2RlLCBub2RlLmlzRGlydHkpO1xuXG4gIGlmIChub2RlLmNoaWxkTm9kZXMpIHtcbiAgICBtYXAobm9kZS5jaGlsZE5vZGVzLCBkdW1wKTtcbiAgfSBlbHNlIGlmIChub2RlLmZpcnN0Q2hpbGRNb3JwaCkge1xuICAgIHZhciBjdXJyZW50ID0gbm9kZS5maXJzdENoaWxkTW9ycGg7XG5cbiAgICB3aGlsZSAoY3VycmVudCkge1xuICAgICAgZHVtcChjdXJyZW50KTtcbiAgICAgIGN1cnJlbnQgPSBjdXJyZW50Lm5leHRNb3JwaDtcbiAgICB9XG4gIH0gZWxzZSBpZiAobm9kZS5tb3JwaExpc3QpIHtcbiAgICBkdW1wKG5vZGUubW9ycGhMaXN0KTtcbiAgfVxuXG4gIGNvbnNvbGUuZ3JvdXBFbmQoKTtcbn1cblxuZnVuY3Rpb24gbWFwKG5vZGVzLCBjYikge1xuICBmb3IgKHZhciBpPTAsIGw9bm9kZXMubGVuZ3RoOyBpPGw7IGkrKykge1xuICAgIGNiKG5vZGVzW2ldKTtcbiAgfVxufVxuIl19