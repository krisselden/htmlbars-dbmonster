exports.__esModule = true;
exports.default = traverse;
exports.normalizeVisitor = normalizeVisitor;

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { 'default': obj }; }

var _typesVisitorKeys = require('../types/visitor-keys');

var _typesVisitorKeys2 = _interopRequireDefault(_typesVisitorKeys);

var _errors = require('./errors');

function visitNode(visitor, node) {
  var handler = visitor[node.type] || visitor.All;
  var result = undefined;

  if (handler && handler.enter) {
    result = handler.enter.call(null, node);
  }

  if (result === undefined) {
    var keys = _typesVisitorKeys2.default[node.type];

    for (var i = 0; i < keys.length; i++) {
      visitKey(visitor, handler, node, keys[i]);
    }

    if (handler && handler.exit) {
      result = handler.exit.call(null, node);
    }
  }

  return result;
}

function visitKey(visitor, handler, node, key) {
  var value = node[key];
  if (!value) {
    return;
  }

  var keyHandler = handler && (handler.keys[key] || handler.keys.All);
  var result = undefined;

  if (keyHandler && keyHandler.enter) {
    result = keyHandler.enter.call(null, node, key);
    if (result !== undefined) {
      throw _errors.cannotReplaceOrRemoveInKeyHandlerYet(node, key);
    }
  }

  if (Array.isArray(value)) {
    visitArray(visitor, value);
  } else {
    var _result = visitNode(visitor, value);
    if (_result !== undefined) {
      assignKey(node, key, _result);
    }
  }

  if (keyHandler && keyHandler.exit) {
    result = keyHandler.exit.call(null, node, key);
    if (result !== undefined) {
      throw _errors.cannotReplaceOrRemoveInKeyHandlerYet(node, key);
    }
  }
}

function visitArray(visitor, array) {
  for (var i = 0; i < array.length; i++) {
    var result = visitNode(visitor, array[i]);
    if (result !== undefined) {
      i += spliceArray(array, i, result) - 1;
    }
  }
}

function assignKey(node, key, result) {
  if (result === null) {
    throw _errors.cannotRemoveNode(node[key], node, key);
  } else if (Array.isArray(result)) {
    if (result.length === 1) {
      node[key] = result[0];
    } else {
      if (result.length === 0) {
        throw _errors.cannotRemoveNode(node[key], node, key);
      } else {
        throw _errors.cannotReplaceNode(node[key], node, key);
      }
    }
  } else {
    node[key] = result;
  }
}

function spliceArray(array, index, result) {
  if (result === null) {
    array.splice(index, 1);
    return 0;
  } else if (Array.isArray(result)) {
    array.splice.apply(array, [index, 1].concat(result));
    return result.length;
  } else {
    array.splice(index, 1, result);
    return 1;
  }
}

function traverse(node, visitor) {
  visitNode(normalizeVisitor(visitor), node);
}

function normalizeVisitor(visitor) {
  var normalizedVisitor = {};

  for (var type in visitor) {
    var handler = visitor[type] || visitor.All;
    var normalizedKeys = {};

    if (typeof handler === 'object') {
      var keys = handler.keys;
      if (keys) {
        for (var key in keys) {
          var keyHandler = keys[key];
          if (typeof keyHandler === 'object') {
            normalizedKeys[key] = {
              enter: typeof keyHandler.enter === 'function' ? keyHandler.enter : null,
              exit: typeof keyHandler.exit === 'function' ? keyHandler.exit : null
            };
          } else if (typeof keyHandler === 'function') {
            normalizedKeys[key] = {
              enter: keyHandler,
              exit: null
            };
          }
        }
      }

      normalizedVisitor[type] = {
        enter: typeof handler.enter === 'function' ? handler.enter : null,
        exit: typeof handler.exit === 'function' ? handler.exit : null,
        keys: normalizedKeys
      };
    } else if (typeof handler === 'function') {
      normalizedVisitor[type] = {
        enter: handler,
        exit: null,
        keys: normalizedKeys
      };
    }
  }

  return normalizedVisitor;
}
//# sourceMappingURL=data:application/json;base64,