exports.__esModule = true;
exports.cannotRemoveNode = cannotRemoveNode;
exports.cannotReplaceNode = cannotReplaceNode;
exports.cannotReplaceOrRemoveInKeyHandlerYet = cannotReplaceOrRemoveInKeyHandlerYet;
function TraversalError(message, node, parent, key) {
  this.name = "TraversalError";
  this.message = message;
  this.node = node;
  this.parent = parent;
  this.key = key;
}

TraversalError.prototype = Object.create(Error.prototype);
TraversalError.prototype.constructor = TraversalError;

exports.default = TraversalError;

function cannotRemoveNode(node, parent, key) {
  return new TraversalError("Cannot remove a node unless it is part of an array", node, parent, key);
}

function cannotReplaceNode(node, parent, key) {
  return new TraversalError("Cannot replace a node with multiple nodes unless it is part of an array", node, parent, key);
}

function cannotReplaceOrRemoveInKeyHandlerYet(node, key) {
  return new TraversalError("Replacing and removing in key handlers is not yet supported.", node, null, key);
}
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbImh0bWxiYXJzLXN5bnRheC90cmF2ZXJzYWwvZXJyb3JzLmpzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7UUFhZ0IsZ0JBQWdCLEdBQWhCLGdCQUFnQjtRQU9oQixpQkFBaUIsR0FBakIsaUJBQWlCO1FBT2pCLG9DQUFvQyxHQUFwQyxvQ0FBb0M7QUEzQnBELFNBQVMsY0FBYyxDQUFDLE9BQU8sRUFBRSxJQUFJLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRTtBQUNsRCxNQUFJLENBQUMsSUFBSSxHQUFHLGdCQUFnQixDQUFDO0FBQzdCLE1BQUksQ0FBQyxPQUFPLEdBQUcsT0FBTyxDQUFDO0FBQ3ZCLE1BQUksQ0FBQyxJQUFJLEdBQUcsSUFBSSxDQUFDO0FBQ2pCLE1BQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0FBQ3JCLE1BQUksQ0FBQyxHQUFHLEdBQUcsR0FBRyxDQUFDO0NBQ2hCOztBQUVELGNBQWMsQ0FBQyxTQUFTLEdBQUcsTUFBTSxDQUFDLE1BQU0sQ0FBQyxLQUFLLENBQUMsU0FBUyxDQUFDLENBQUM7QUFDMUQsY0FBYyxDQUFDLFNBQVMsQ0FBQyxXQUFXLEdBQUcsY0FBYyxDQUFDOztrQkFFdkMsY0FBYzs7QUFFdEIsU0FBUyxnQkFBZ0IsQ0FBQyxJQUFJLEVBQUUsTUFBTSxFQUFFLEdBQUcsRUFBRTtBQUNsRCxTQUFPLElBQUksY0FBYyxDQUN2QixvREFBb0QsRUFDcEQsSUFBSSxFQUFFLE1BQU0sRUFBRSxHQUFHLENBQ2xCLENBQUM7Q0FDSDs7QUFFTSxTQUFTLGlCQUFpQixDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsR0FBRyxFQUFFO0FBQ25ELFNBQU8sSUFBSSxjQUFjLENBQ3ZCLHlFQUF5RSxFQUN6RSxJQUFJLEVBQUUsTUFBTSxFQUFFLEdBQUcsQ0FDbEIsQ0FBQztDQUNIOztBQUVNLFNBQVMsb0NBQW9DLENBQUMsSUFBSSxFQUFFLEdBQUcsRUFBRTtBQUM5RCxTQUFPLElBQUksY0FBYyxDQUN2Qiw4REFBOEQsRUFDOUQsSUFBSSxFQUFFLElBQUksRUFBRSxHQUFHLENBQ2hCLENBQUM7Q0FDSCIsImZpbGUiOiJodG1sYmFycy1zeW50YXgvdHJhdmVyc2FsL2Vycm9ycy5qcyIsInNvdXJjZXNDb250ZW50IjpbImZ1bmN0aW9uIFRyYXZlcnNhbEVycm9yKG1lc3NhZ2UsIG5vZGUsIHBhcmVudCwga2V5KSB7XG4gIHRoaXMubmFtZSA9IFwiVHJhdmVyc2FsRXJyb3JcIjtcbiAgdGhpcy5tZXNzYWdlID0gbWVzc2FnZTtcbiAgdGhpcy5ub2RlID0gbm9kZTtcbiAgdGhpcy5wYXJlbnQgPSBwYXJlbnQ7XG4gIHRoaXMua2V5ID0ga2V5O1xufVxuXG5UcmF2ZXJzYWxFcnJvci5wcm90b3R5cGUgPSBPYmplY3QuY3JlYXRlKEVycm9yLnByb3RvdHlwZSk7XG5UcmF2ZXJzYWxFcnJvci5wcm90b3R5cGUuY29uc3RydWN0b3IgPSBUcmF2ZXJzYWxFcnJvcjtcblxuZXhwb3J0IGRlZmF1bHQgVHJhdmVyc2FsRXJyb3I7XG5cbmV4cG9ydCBmdW5jdGlvbiBjYW5ub3RSZW1vdmVOb2RlKG5vZGUsIHBhcmVudCwga2V5KSB7XG4gIHJldHVybiBuZXcgVHJhdmVyc2FsRXJyb3IoXG4gICAgXCJDYW5ub3QgcmVtb3ZlIGEgbm9kZSB1bmxlc3MgaXQgaXMgcGFydCBvZiBhbiBhcnJheVwiLFxuICAgIG5vZGUsIHBhcmVudCwga2V5XG4gICk7XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjYW5ub3RSZXBsYWNlTm9kZShub2RlLCBwYXJlbnQsIGtleSkge1xuICByZXR1cm4gbmV3IFRyYXZlcnNhbEVycm9yKFxuICAgIFwiQ2Fubm90IHJlcGxhY2UgYSBub2RlIHdpdGggbXVsdGlwbGUgbm9kZXMgdW5sZXNzIGl0IGlzIHBhcnQgb2YgYW4gYXJyYXlcIixcbiAgICBub2RlLCBwYXJlbnQsIGtleVxuICApO1xufVxuXG5leHBvcnQgZnVuY3Rpb24gY2Fubm90UmVwbGFjZU9yUmVtb3ZlSW5LZXlIYW5kbGVyWWV0KG5vZGUsIGtleSkge1xuICByZXR1cm4gbmV3IFRyYXZlcnNhbEVycm9yKFxuICAgIFwiUmVwbGFjaW5nIGFuZCByZW1vdmluZyBpbiBrZXkgaGFuZGxlcnMgaXMgbm90IHlldCBzdXBwb3J0ZWQuXCIsXG4gICAgbm9kZSwgbnVsbCwga2V5XG4gICk7XG59XG4iXX0=