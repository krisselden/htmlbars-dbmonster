exports.__esModule = true;
var escape = (function () {
  var test = /[&<>"'`]/;
  var replace = /[&<>"'`]/g;
  var map = {
    "&": "&amp;",
    "<": "&lt;",
    ">": "&gt;",
    '"': "&quot;",
    "'": "&#x27;",
    "`": "&#x60;"
  };
  function escapeChar(char) {
    return map[char];
  }
  return function escape(string) {
    if (!test.test(string)) {
      return string;
    }
    return string.replace(replace, escapeChar);
  };
})();

function Generator() {
  this.escape = escape;
}

Generator.prototype = {
  generate: function (tokens) {
    var buffer = '';
    var token;
    for (var i = 0; i < tokens.length; i++) {
      token = tokens[i];
      buffer += this[token.type](token);
    }
    return buffer;
  },

  escape: function (text) {
    var unsafeCharsMap = this.unsafeCharsMap;
    return text.replace(this.unsafeChars, function (char) {
      return unsafeCharsMap[char] || char;
    });
  },

  StartTag: function (token) {
    var out = "<";
    out += token.tagName;

    if (token.attributes.length) {
      out += " " + this.Attributes(token.attributes);
    }

    out += ">";

    return out;
  },

  EndTag: function (token) {
    return "</" + token.tagName + ">";
  },

  Chars: function (token) {
    return this.escape(token.chars);
  },

  Comment: function (token) {
    return "<!--" + token.chars + "-->";
  },

  Attributes: function (attributes) {
    var out = [],
        attribute;

    for (var i = 0, l = attributes.length; i < l; i++) {
      attribute = attributes[i];

      out.push(this.Attribute(attribute[0], attribute[1]));
    }

    return out.join(" ");
  },

  Attribute: function (name, value) {
    var attrString = name;

    if (value) {
      value = this.escape(value);
      attrString += "=\"" + value + "\"";
    }

    return attrString;
  }
};

exports.default = Generator;
module.exports = exports.default;
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbInNpbXBsZS1odG1sLXRva2VuaXplci9nZW5lcmF0b3IuanMiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IjtBQUFBLElBQUksTUFBTSxHQUFLLENBQUEsWUFBWTtBQUN6QixNQUFJLElBQUksR0FBRyxVQUFVLENBQUM7QUFDdEIsTUFBSSxPQUFPLEdBQUcsV0FBVyxDQUFDO0FBQzFCLE1BQUksR0FBRyxHQUFHO0FBQ1IsT0FBRyxFQUFFLE9BQU87QUFDWixPQUFHLEVBQUUsTUFBTTtBQUNYLE9BQUcsRUFBRSxNQUFNO0FBQ1gsT0FBRyxFQUFFLFFBQVE7QUFDYixPQUFHLEVBQUUsUUFBUTtBQUNiLE9BQUcsRUFBRSxRQUFRO0dBQ2QsQ0FBQztBQUNGLFdBQVMsVUFBVSxDQUFDLElBQUksRUFBRTtBQUN4QixXQUFPLEdBQUcsQ0FBQyxJQUFJLENBQUMsQ0FBQztHQUNsQjtBQUNELFNBQU8sU0FBUyxNQUFNLENBQUMsTUFBTSxFQUFFO0FBQzdCLFFBQUcsQ0FBQyxJQUFJLENBQUMsSUFBSSxDQUFDLE1BQU0sQ0FBQyxFQUFFO0FBQ3JCLGFBQU8sTUFBTSxDQUFDO0tBQ2Y7QUFDRCxXQUFPLE1BQU0sQ0FBQyxPQUFPLENBQUMsT0FBTyxFQUFFLFVBQVUsQ0FBQyxDQUFDO0dBQzVDLENBQUM7Q0FDSCxDQUFBLEVBQUUsQUFBQyxDQUFDOztBQUVMLFNBQVMsU0FBUyxHQUFHO0FBQ25CLE1BQUksQ0FBQyxNQUFNLEdBQUcsTUFBTSxDQUFDO0NBQ3RCOztBQUVELFNBQVMsQ0FBQyxTQUFTLEdBQUc7QUFDcEIsVUFBUSxFQUFFLFVBQVUsTUFBTSxFQUFFO0FBQzFCLFFBQUksTUFBTSxHQUFHLEVBQUUsQ0FBQztBQUNoQixRQUFJLEtBQUssQ0FBQztBQUNWLFNBQUssSUFBSSxDQUFDLEdBQUMsQ0FBQyxFQUFFLENBQUMsR0FBQyxNQUFNLENBQUMsTUFBTSxFQUFFLENBQUMsRUFBRSxFQUFFO0FBQ2xDLFdBQUssR0FBRyxNQUFNLENBQUMsQ0FBQyxDQUFDLENBQUM7QUFDbEIsWUFBTSxJQUFJLElBQUksQ0FBQyxLQUFLLENBQUMsSUFBSSxDQUFDLENBQUMsS0FBSyxDQUFDLENBQUM7S0FDbkM7QUFDRCxXQUFPLE1BQU0sQ0FBQztHQUNmOztBQUVELFFBQU0sRUFBRSxVQUFVLElBQUksRUFBRTtBQUN0QixRQUFJLGNBQWMsR0FBRyxJQUFJLENBQUMsY0FBYyxDQUFDO0FBQ3pDLFdBQU8sSUFBSSxDQUFDLE9BQU8sQ0FBQyxJQUFJLENBQUMsV0FBVyxFQUFFLFVBQVUsSUFBSSxFQUFFO0FBQ3BELGFBQU8sY0FBYyxDQUFDLElBQUksQ0FBQyxJQUFJLElBQUksQ0FBQztLQUNyQyxDQUFDLENBQUM7R0FDSjs7QUFFRCxVQUFRLEVBQUUsVUFBVSxLQUFLLEVBQUU7QUFDekIsUUFBSSxHQUFHLEdBQUcsR0FBRyxDQUFDO0FBQ2QsT0FBRyxJQUFJLEtBQUssQ0FBQyxPQUFPLENBQUM7O0FBRXJCLFFBQUksS0FBSyxDQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUU7QUFDM0IsU0FBRyxJQUFJLEdBQUcsR0FBRyxJQUFJLENBQUMsVUFBVSxDQUFDLEtBQUssQ0FBQyxVQUFVLENBQUMsQ0FBQztLQUNoRDs7QUFFRCxPQUFHLElBQUksR0FBRyxDQUFDOztBQUVYLFdBQU8sR0FBRyxDQUFDO0dBQ1o7O0FBRUQsUUFBTSxFQUFFLFVBQVUsS0FBSyxFQUFFO0FBQ3ZCLFdBQU8sSUFBSSxHQUFHLEtBQUssQ0FBQyxPQUFPLEdBQUcsR0FBRyxDQUFDO0dBQ25DOztBQUVELE9BQUssRUFBRSxVQUFVLEtBQUssRUFBRTtBQUN0QixXQUFPLElBQUksQ0FBQyxNQUFNLENBQUMsS0FBSyxDQUFDLEtBQUssQ0FBQyxDQUFDO0dBQ2pDOztBQUVELFNBQU8sRUFBRSxVQUFVLEtBQUssRUFBRTtBQUN4QixXQUFPLE1BQU0sR0FBRyxLQUFLLENBQUMsS0FBSyxHQUFHLEtBQUssQ0FBQztHQUNyQzs7QUFFRCxZQUFVLEVBQUUsVUFBVSxVQUFVLEVBQUU7QUFDaEMsUUFBSSxHQUFHLEdBQUcsRUFBRTtRQUFFLFNBQVMsQ0FBQzs7QUFFeEIsU0FBSyxJQUFJLENBQUMsR0FBQyxDQUFDLEVBQUUsQ0FBQyxHQUFDLFVBQVUsQ0FBQyxNQUFNLEVBQUUsQ0FBQyxHQUFDLENBQUMsRUFBRSxDQUFDLEVBQUUsRUFBRTtBQUMzQyxlQUFTLEdBQUcsVUFBVSxDQUFDLENBQUMsQ0FBQyxDQUFDOztBQUUxQixTQUFHLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsQ0FBQyxFQUFFLFNBQVMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUM7S0FDdEQ7O0FBRUQsV0FBTyxHQUFHLENBQUMsSUFBSSxDQUFDLEdBQUcsQ0FBQyxDQUFDO0dBQ3RCOztBQUVELFdBQVMsRUFBRSxVQUFVLElBQUksRUFBRSxLQUFLLEVBQUU7QUFDaEMsUUFBSSxVQUFVLEdBQUcsSUFBSSxDQUFDOztBQUV0QixRQUFJLEtBQUssRUFBRTtBQUNULFdBQUssR0FBRyxJQUFJLENBQUMsTUFBTSxDQUFDLEtBQUssQ0FBQyxDQUFDO0FBQzNCLGdCQUFVLElBQUksS0FBSyxHQUFHLEtBQUssR0FBRyxJQUFJLENBQUM7S0FDcEM7O0FBRUQsV0FBTyxVQUFVLENBQUM7R0FDbkI7Q0FDRixDQUFDOztrQkFFYSxTQUFTIiwiZmlsZSI6InNpbXBsZS1odG1sLXRva2VuaXplci9nZW5lcmF0b3IuanMiLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgZXNjYXBlID0gIChmdW5jdGlvbiAoKSB7XG4gIHZhciB0ZXN0ID0gL1smPD5cIidgXS87XG4gIHZhciByZXBsYWNlID0gL1smPD5cIidgXS9nO1xuICB2YXIgbWFwID0ge1xuICAgIFwiJlwiOiBcIiZhbXA7XCIsXG4gICAgXCI8XCI6IFwiJmx0O1wiLFxuICAgIFwiPlwiOiBcIiZndDtcIixcbiAgICAnXCInOiBcIiZxdW90O1wiLFxuICAgIFwiJ1wiOiBcIiYjeDI3O1wiLFxuICAgIFwiYFwiOiBcIiYjeDYwO1wiXG4gIH07XG4gIGZ1bmN0aW9uIGVzY2FwZUNoYXIoY2hhcikge1xuICAgIHJldHVybiBtYXBbY2hhcl07XG4gIH1cbiAgcmV0dXJuIGZ1bmN0aW9uIGVzY2FwZShzdHJpbmcpIHtcbiAgICBpZighdGVzdC50ZXN0KHN0cmluZykpIHtcbiAgICAgIHJldHVybiBzdHJpbmc7XG4gICAgfVxuICAgIHJldHVybiBzdHJpbmcucmVwbGFjZShyZXBsYWNlLCBlc2NhcGVDaGFyKTtcbiAgfTtcbn0oKSk7XG5cbmZ1bmN0aW9uIEdlbmVyYXRvcigpIHtcbiAgdGhpcy5lc2NhcGUgPSBlc2NhcGU7XG59XG5cbkdlbmVyYXRvci5wcm90b3R5cGUgPSB7XG4gIGdlbmVyYXRlOiBmdW5jdGlvbiAodG9rZW5zKSB7XG4gICAgdmFyIGJ1ZmZlciA9ICcnO1xuICAgIHZhciB0b2tlbjtcbiAgICBmb3IgKHZhciBpPTA7IGk8dG9rZW5zLmxlbmd0aDsgaSsrKSB7XG4gICAgICB0b2tlbiA9IHRva2Vuc1tpXTtcbiAgICAgIGJ1ZmZlciArPSB0aGlzW3Rva2VuLnR5cGVdKHRva2VuKTtcbiAgICB9XG4gICAgcmV0dXJuIGJ1ZmZlcjtcbiAgfSxcblxuICBlc2NhcGU6IGZ1bmN0aW9uICh0ZXh0KSB7XG4gICAgdmFyIHVuc2FmZUNoYXJzTWFwID0gdGhpcy51bnNhZmVDaGFyc01hcDtcbiAgICByZXR1cm4gdGV4dC5yZXBsYWNlKHRoaXMudW5zYWZlQ2hhcnMsIGZ1bmN0aW9uIChjaGFyKSB7XG4gICAgICByZXR1cm4gdW5zYWZlQ2hhcnNNYXBbY2hhcl0gfHwgY2hhcjtcbiAgICB9KTtcbiAgfSxcblxuICBTdGFydFRhZzogZnVuY3Rpb24gKHRva2VuKSB7XG4gICAgdmFyIG91dCA9IFwiPFwiO1xuICAgIG91dCArPSB0b2tlbi50YWdOYW1lO1xuXG4gICAgaWYgKHRva2VuLmF0dHJpYnV0ZXMubGVuZ3RoKSB7XG4gICAgICBvdXQgKz0gXCIgXCIgKyB0aGlzLkF0dHJpYnV0ZXModG9rZW4uYXR0cmlidXRlcyk7XG4gICAgfVxuXG4gICAgb3V0ICs9IFwiPlwiO1xuXG4gICAgcmV0dXJuIG91dDtcbiAgfSxcblxuICBFbmRUYWc6IGZ1bmN0aW9uICh0b2tlbikge1xuICAgIHJldHVybiBcIjwvXCIgKyB0b2tlbi50YWdOYW1lICsgXCI+XCI7XG4gIH0sXG5cbiAgQ2hhcnM6IGZ1bmN0aW9uICh0b2tlbikge1xuICAgIHJldHVybiB0aGlzLmVzY2FwZSh0b2tlbi5jaGFycyk7XG4gIH0sXG5cbiAgQ29tbWVudDogZnVuY3Rpb24gKHRva2VuKSB7XG4gICAgcmV0dXJuIFwiPCEtLVwiICsgdG9rZW4uY2hhcnMgKyBcIi0tPlwiO1xuICB9LFxuXG4gIEF0dHJpYnV0ZXM6IGZ1bmN0aW9uIChhdHRyaWJ1dGVzKSB7XG4gICAgdmFyIG91dCA9IFtdLCBhdHRyaWJ1dGU7XG5cbiAgICBmb3IgKHZhciBpPTAsIGw9YXR0cmlidXRlcy5sZW5ndGg7IGk8bDsgaSsrKSB7XG4gICAgICBhdHRyaWJ1dGUgPSBhdHRyaWJ1dGVzW2ldO1xuXG4gICAgICBvdXQucHVzaCh0aGlzLkF0dHJpYnV0ZShhdHRyaWJ1dGVbMF0sIGF0dHJpYnV0ZVsxXSkpO1xuICAgIH1cblxuICAgIHJldHVybiBvdXQuam9pbihcIiBcIik7XG4gIH0sXG5cbiAgQXR0cmlidXRlOiBmdW5jdGlvbiAobmFtZSwgdmFsdWUpIHtcbiAgICB2YXIgYXR0clN0cmluZyA9IG5hbWU7XG5cbiAgICBpZiAodmFsdWUpIHtcbiAgICAgIHZhbHVlID0gdGhpcy5lc2NhcGUodmFsdWUpO1xuICAgICAgYXR0clN0cmluZyArPSBcIj1cXFwiXCIgKyB2YWx1ZSArIFwiXFxcIlwiO1xuICAgIH1cblxuICAgIHJldHVybiBhdHRyU3RyaW5nO1xuICB9XG59O1xuXG5leHBvcnQgZGVmYXVsdCBHZW5lcmF0b3I7XG4iXX0=