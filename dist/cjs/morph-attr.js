exports.__esModule = true;

var _morphAttrSanitizeAttributeValue = require("./morph-attr/sanitize-attribute-value");

var _domHelperProp = require("./dom-helper/prop");

var _domHelperBuildHtmlDom = require("./dom-helper/build-html-dom");

var _htmlbarsUtil = require("./htmlbars-util");

function getProperty() {
  return this.domHelper.getPropertyStrict(this.element, this.attrName);
}

function updateProperty(value) {
  if (this._renderedInitially === true || !_domHelperProp.isAttrRemovalValue(value)) {
    // do not render if initial value is undefined or null
    this.domHelper.setPropertyStrict(this.element, this.attrName, value);
  }

  this._renderedInitially = true;
}

function getAttribute() {
  return this.domHelper.getAttribute(this.element, this.attrName);
}

function updateAttribute(value) {
  if (_domHelperProp.isAttrRemovalValue(value)) {
    this.domHelper.removeAttribute(this.element, this.attrName);
  } else {
    this.domHelper.setAttribute(this.element, this.attrName, value);
  }
}

function getAttributeNS() {
  return this.domHelper.getAttributeNS(this.element, this.namespace, this.attrName);
}

function updateAttributeNS(value) {
  if (_domHelperProp.isAttrRemovalValue(value)) {
    this.domHelper.removeAttribute(this.element, this.attrName);
  } else {
    this.domHelper.setAttributeNS(this.element, this.namespace, this.attrName, value);
  }
}

var UNSET = { unset: true };

var guid = 1;

function AttrMorph(element, attrName, domHelper, namespace) {
  this.element = element;
  this.domHelper = domHelper;
  this.namespace = namespace !== undefined ? namespace : _htmlbarsUtil.getAttrNamespace(attrName);
  this.state = {};
  this.isDirty = false;
  this.isSubtreeDirty = false;
  this.escaped = true;
  this.lastValue = UNSET;
  this.lastResult = null;
  this.lastYielded = null;
  this.childNodes = null;
  this.linkedParams = null;
  this.linkedResult = null;
  this.guid = "attr" + guid++;
  this.ownerNode = null;
  this.rendered = false;
  this._renderedInitially = false;

  if (this.namespace) {
    this._update = updateAttributeNS;
    this._get = getAttributeNS;
    this.attrName = attrName;
  } else {
    var _normalizeProperty = _domHelperProp.normalizeProperty(this.element, attrName);

    var normalized = _normalizeProperty.normalized;
    var type = _normalizeProperty.type;

    if (element.namespaceURI === _domHelperBuildHtmlDom.svgNamespace || attrName === 'style' || type === 'attr') {
      this._update = updateAttribute;
      this._get = getAttribute;
      this.attrName = normalized;
    } else {
      this._update = updateProperty;
      this._get = getProperty;
      this.attrName = normalized;
    }
  }
}

AttrMorph.prototype.setContent = function (value) {
  if (this.lastValue === value) {
    return;
  }
  this.lastValue = value;

  if (this.escaped) {
    var sanitized = _morphAttrSanitizeAttributeValue.sanitizeAttributeValue(this.domHelper, this.element, this.attrName, value);
    this._update(sanitized, this.namespace);
  } else {
    this._update(value, this.namespace);
  }
};

AttrMorph.prototype.getContent = function () {
  var value = this.lastValue = this._get();
  return value;
};

// renderAndCleanup calls `clear` on all items in the morph map
// just before calling `destroy` on the morph.
//
// As a future refactor this could be changed to set the property
// back to its original/default value.
AttrMorph.prototype.clear = function () {};

AttrMorph.prototype.destroy = function () {
  this.element = null;
  this.domHelper = null;
};

exports.default = AttrMorph;
exports.sanitizeAttributeValue = _morphAttrSanitizeAttributeValue.sanitizeAttributeValue;
//# sourceMappingURL=data:application/json;base64,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QUFFO0tBQzdCO0dBQ0Y7Q0FDRjs7QUFFRCxTQUFTLENBQUMsU0FBUyxDQUFDLFVBQVUsR0FBRyxVQUFVLEtBQUssRUFBRTtBQUNoRCxNQUFJLElBQUksQ0FBQyxTQUFTLEtBQUssS0FBSyxFQUFFO0FBQUUsV0FBTztHQUFFO0FBQ3pDLE1BQUksQ0FBQyxTQUFTLEdBQUcsS0FBSyxDQUFDOztBQUV2QixNQUFJLElBQUksQ0FBQyxPQUFPLEVBQUU7QUFDaEIsUUFBSSxTQUFTLEdBQUcsaUNBMUZYLHNCQUFzQixDQTBGWSxJQUFJLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDLFFBQVEsRUFBRSxLQUFLLENBQUMsQ0FBQztBQUMzRixRQUFJLENBQUMsT0FBTyxDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUMsU0FBUyxDQUFDLENBQUM7R0FDekMsTUFBTTtBQUNMLFFBQUksQ0FBQyxPQUFPLENBQUMsS0FBSyxFQUFFLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztHQUNyQztDQUNGLENBQUM7O0FBRUYsU0FBUyxDQUFDLFNBQVMsQ0FBQyxVQUFVLEdBQUcsWUFBWTtBQUMzQyxNQUFJLEtBQUssR0FBRyxJQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQyxJQUFJLEVBQUUsQ0FBQztBQUN6QyxTQUFPLEtBQUssQ0FBQztDQUNkLENBQUM7Ozs7Ozs7QUFPRixTQUFTLENBQUMsU0FBUyxDQUFDLEtBQUssR0FBRyxZQUFXLEVBQUcsQ0FBQzs7QUFFM0MsU0FBUyxDQUFDLFNBQVMsQ0FBQyxPQUFPLEdBQUcsWUFBVztBQUN2QyxNQUFJLENBQUMsT0FBTyxHQUFHLElBQUksQ0FBQztBQUNwQixNQUFJLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztDQUN2QixDQUFDOztrQkFFYSxTQUFTO1FBRWYsc0JBQXNCLG9DQXBIdEIsc0JBQXNCIiwiZmlsZSI6Im1vcnBoLWF0dHIuanMiLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBzYW5pdGl6ZUF0dHJpYnV0ZVZhbHVlIH0gZnJvbSBcIi4vbW9ycGgtYXR0ci9zYW5pdGl6ZS1hdHRyaWJ1dGUtdmFsdWVcIjtcbmltcG9ydCB7IGlzQXR0clJlbW92YWxWYWx1ZSwgbm9ybWFsaXplUHJvcGVydHkgfSBmcm9tIFwiLi9kb20taGVscGVyL3Byb3BcIjtcbmltcG9ydCB7IHN2Z05hbWVzcGFjZSB9IGZyb20gXCIuL2RvbS1oZWxwZXIvYnVpbGQtaHRtbC1kb21cIjtcbmltcG9ydCB7IGdldEF0dHJOYW1lc3BhY2UgfSBmcm9tIFwiLi9odG1sYmFycy11dGlsXCI7XG5cbmZ1bmN0aW9uIGdldFByb3BlcnR5KCkge1xuICByZXR1cm4gdGhpcy5kb21IZWxwZXIuZ2V0UHJvcGVydHlTdHJpY3QodGhpcy5lbGVtZW50LCB0aGlzLmF0dHJOYW1lKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlUHJvcGVydHkodmFsdWUpIHtcbiAgaWYgKHRoaXMuX3JlbmRlcmVkSW5pdGlhbGx5ID09PSB0cnVlIHx8ICFpc0F0dHJSZW1vdmFsVmFsdWUodmFsdWUpKSB7XG4gICAgLy8gZG8gbm90IHJlbmRlciBpZiBpbml0aWFsIHZhbHVlIGlzIHVuZGVmaW5lZCBvciBudWxsXG4gICAgdGhpcy5kb21IZWxwZXIuc2V0UHJvcGVydHlTdHJpY3QodGhpcy5lbGVtZW50LCB0aGlzLmF0dHJOYW1lLCB2YWx1ZSk7XG4gIH1cblxuICB0aGlzLl9yZW5kZXJlZEluaXRpYWxseSA9IHRydWU7XG59XG5cbmZ1bmN0aW9uIGdldEF0dHJpYnV0ZSgpIHtcbiAgcmV0dXJuIHRoaXMuZG9tSGVscGVyLmdldEF0dHJpYnV0ZSh0aGlzLmVsZW1lbnQsIHRoaXMuYXR0ck5hbWUpO1xufVxuXG5mdW5jdGlvbiB1cGRhdGVBdHRyaWJ1dGUodmFsdWUpIHtcbiAgaWYgKGlzQXR0clJlbW92YWxWYWx1ZSh2YWx1ZSkpIHtcbiAgICB0aGlzLmRvbUhlbHBlci5yZW1vdmVBdHRyaWJ1dGUodGhpcy5lbGVtZW50LCB0aGlzLmF0dHJOYW1lKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmRvbUhlbHBlci5zZXRBdHRyaWJ1dGUodGhpcy5lbGVtZW50LCB0aGlzLmF0dHJOYW1lLCB2YWx1ZSk7XG4gIH1cbn1cblxuZnVuY3Rpb24gZ2V0QXR0cmlidXRlTlMoKSB7XG4gIHJldHVybiB0aGlzLmRvbUhlbHBlci5nZXRBdHRyaWJ1dGVOUyh0aGlzLmVsZW1lbnQsIHRoaXMubmFtZXNwYWNlLCB0aGlzLmF0dHJOYW1lKTtcbn1cblxuZnVuY3Rpb24gdXBkYXRlQXR0cmlidXRlTlModmFsdWUpIHtcbiAgaWYgKGlzQXR0clJlbW92YWxWYWx1ZSh2YWx1ZSkpIHtcbiAgICB0aGlzLmRvbUhlbHBlci5yZW1vdmVBdHRyaWJ1dGUodGhpcy5lbGVtZW50LCB0aGlzLmF0dHJOYW1lKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLmRvbUhlbHBlci5zZXRBdHRyaWJ1dGVOUyh0aGlzLmVsZW1lbnQsIHRoaXMubmFtZXNwYWNlLCB0aGlzLmF0dHJOYW1lLCB2YWx1ZSk7XG4gIH1cbn1cblxudmFyIFVOU0VUID0geyB1bnNldDogdHJ1ZSB9O1xuXG52YXIgZ3VpZCA9IDE7XG5cbmZ1bmN0aW9uIEF0dHJNb3JwaChlbGVtZW50LCBhdHRyTmFtZSwgZG9tSGVscGVyLCBuYW1lc3BhY2UpIHtcbiAgdGhpcy5lbGVtZW50ID0gZWxlbWVudDtcbiAgdGhpcy5kb21IZWxwZXIgPSBkb21IZWxwZXI7XG4gIHRoaXMubmFtZXNwYWNlID0gbmFtZXNwYWNlICE9PSB1bmRlZmluZWQgPyBuYW1lc3BhY2UgOiBnZXRBdHRyTmFtZXNwYWNlKGF0dHJOYW1lKTtcbiAgdGhpcy5zdGF0ZSA9IHt9O1xuICB0aGlzLmlzRGlydHkgPSBmYWxzZTtcbiAgdGhpcy5pc1N1YnRyZWVEaXJ0eSA9IGZhbHNlO1xuICB0aGlzLmVzY2FwZWQgPSB0cnVlO1xuICB0aGlzLmxhc3RWYWx1ZSA9IFVOU0VUO1xuICB0aGlzLmxhc3RSZXN1bHQgPSBudWxsO1xuICB0aGlzLmxhc3RZaWVsZGVkID0gbnVsbDtcbiAgdGhpcy5jaGlsZE5vZGVzID0gbnVsbDtcbiAgdGhpcy5saW5rZWRQYXJhbXMgPSBudWxsO1xuICB0aGlzLmxpbmtlZFJlc3VsdCA9IG51bGw7XG4gIHRoaXMuZ3VpZCA9IFwiYXR0clwiICsgZ3VpZCsrO1xuICB0aGlzLm93bmVyTm9kZSA9IG51bGw7XG4gIHRoaXMucmVuZGVyZWQgPSBmYWxzZTtcbiAgdGhpcy5fcmVuZGVyZWRJbml0aWFsbHkgPSBmYWxzZTtcblxuXG4gIGlmICh0aGlzLm5hbWVzcGFjZSkge1xuICAgIHRoaXMuX3VwZGF0ZSA9IHVwZGF0ZUF0dHJpYnV0ZU5TO1xuICAgIHRoaXMuX2dldCA9IGdldEF0dHJpYnV0ZU5TO1xuICAgIHRoaXMuYXR0ck5hbWUgPSBhdHRyTmFtZTtcbiAgfSBlbHNlIHtcbiAgICB2YXIgeyBub3JtYWxpemVkLCB0eXBlIH0gPSBub3JtYWxpemVQcm9wZXJ0eSh0aGlzLmVsZW1lbnQsIGF0dHJOYW1lKTtcblxuICAgIGlmIChlbGVtZW50Lm5hbWVzcGFjZVVSSSA9PT0gc3ZnTmFtZXNwYWNlIHx8IGF0dHJOYW1lID09PSAnc3R5bGUnIHx8IHR5cGUgPT09ICdhdHRyJykge1xuICAgICAgdGhpcy5fdXBkYXRlID0gdXBkYXRlQXR0cmlidXRlO1xuICAgICAgdGhpcy5fZ2V0ID0gZ2V0QXR0cmlidXRlO1xuICAgICAgdGhpcy5hdHRyTmFtZSA9IG5vcm1hbGl6ZWQgO1xuICAgIH0gZWxzZSB7XG4gICAgICB0aGlzLl91cGRhdGUgPSB1cGRhdGVQcm9wZXJ0eTtcbiAgICAgIHRoaXMuX2dldCA9IGdldFByb3BlcnR5O1xuICAgICAgdGhpcy5hdHRyTmFtZSA9IG5vcm1hbGl6ZWQgO1xuICAgIH1cbiAgfVxufVxuXG5BdHRyTW9ycGgucHJvdG90eXBlLnNldENvbnRlbnQgPSBmdW5jdGlvbiAodmFsdWUpIHtcbiAgaWYgKHRoaXMubGFzdFZhbHVlID09PSB2YWx1ZSkgeyByZXR1cm47IH1cbiAgdGhpcy5sYXN0VmFsdWUgPSB2YWx1ZTtcblxuICBpZiAodGhpcy5lc2NhcGVkKSB7XG4gICAgdmFyIHNhbml0aXplZCA9IHNhbml0aXplQXR0cmlidXRlVmFsdWUodGhpcy5kb21IZWxwZXIsIHRoaXMuZWxlbWVudCwgdGhpcy5hdHRyTmFtZSwgdmFsdWUpO1xuICAgIHRoaXMuX3VwZGF0ZShzYW5pdGl6ZWQsIHRoaXMubmFtZXNwYWNlKTtcbiAgfSBlbHNlIHtcbiAgICB0aGlzLl91cGRhdGUodmFsdWUsIHRoaXMubmFtZXNwYWNlKTtcbiAgfVxufTtcblxuQXR0ck1vcnBoLnByb3RvdHlwZS5nZXRDb250ZW50ID0gZnVuY3Rpb24gKCkge1xuICB2YXIgdmFsdWUgPSB0aGlzLmxhc3RWYWx1ZSA9IHRoaXMuX2dldCgpO1xuICByZXR1cm4gdmFsdWU7XG59O1xuXG4vLyByZW5kZXJBbmRDbGVhbnVwIGNhbGxzIGBjbGVhcmAgb24gYWxsIGl0ZW1zIGluIHRoZSBtb3JwaCBtYXBcbi8vIGp1c3QgYmVmb3JlIGNhbGxpbmcgYGRlc3Ryb3lgIG9uIHRoZSBtb3JwaC5cbi8vXG4vLyBBcyBhIGZ1dHVyZSByZWZhY3RvciB0aGlzIGNvdWxkIGJlIGNoYW5nZWQgdG8gc2V0IHRoZSBwcm9wZXJ0eVxuLy8gYmFjayB0byBpdHMgb3JpZ2luYWwvZGVmYXVsdCB2YWx1ZS5cbkF0dHJNb3JwaC5wcm90b3R5cGUuY2xlYXIgPSBmdW5jdGlvbigpIHsgfTtcblxuQXR0ck1vcnBoLnByb3RvdHlwZS5kZXN0cm95ID0gZnVuY3Rpb24oKSB7XG4gIHRoaXMuZWxlbWVudCA9IG51bGw7XG4gIHRoaXMuZG9tSGVscGVyID0gbnVsbDtcbn07XG5cbmV4cG9ydCBkZWZhdWx0IEF0dHJNb3JwaDtcblxuZXhwb3J0IHsgc2FuaXRpemVBdHRyaWJ1dGVWYWx1ZSB9O1xuIl19